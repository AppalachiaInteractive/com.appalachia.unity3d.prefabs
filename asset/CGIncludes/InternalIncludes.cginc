/*
// FEATURE_VEGETATION_STUDIO_GENERAL_IFDEF
#ifdef INDIRECT_INSTANCING_VSP

// FEATURE_VEGETATION_STUDIO_GENERAL
#include "Assets/Resources/CGIncludes/appalachia/VS_indirect.cginc"
#pragma instancing_options assumeuniformscaling maxcount:50 procedural:setup_VSP
#pragma multi_compile GPU_FRUSTUM_ON __

#else

// FEATURE_GPU_INSTANCER
#include "UnityCG.cginc"
#include "Assets/Resources/CGIncludes/appalachia/GPUInstancerInclude.cginc"
#pragma instancing_options procedural:setupGPUI

// FEATURE_GPUINSTANCER_ENABLED_ENDIF
#endif

#include "UnityCG.cginc"
#include "Assets/Resources/CGIncludes/appalachia/GPUInstancerInclude.cginc"
#pragma instancing_options procedural:setupGPUI
*/

uniform float4 _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ;
uniform half _WIND_AUDIO_INFLUENCE;
uniform half _WIND_BASE_AMPLITUDE;
uniform half _WIND_BASE_BRANCH_CYCLE_TIME;
uniform half _WIND_BASE_BRANCH_FIELD_SIZE;
uniform half _WIND_BASE_BRANCH_STRENGTH;
uniform half _WIND_BASE_BRANCH_VARIATION_STRENGTH;
uniform half _WIND_BASE_GRASS_CYCLE_TIME;
uniform half _WIND_BASE_GRASS_FIELD_SIZE;
uniform half _WIND_BASE_GRASS_STRENGTH;
uniform half _WIND_BASE_LEAF_CYCLE_TIME;
uniform half _WIND_BASE_LEAF_FIELD_SIZE;
uniform half _WIND_BASE_LEAF_STRENGTH;
uniform half _WIND_BASE_PLANT_CYCLE_TIME;
uniform half _WIND_BASE_PLANT_FIELD_SIZE;
uniform half _WIND_BASE_PLANT_STRENGTH;
uniform half _WIND_BASE_TRUNK_CYCLE_TIME;
uniform half _WIND_BASE_TRUNK_FIELD_SIZE;
uniform half _WIND_BASE_TRUNK_STRENGTH;
uniform half _WIND_BRANCH_STRENGTH;
uniform half _WIND_GRASS_STRENGTH;
uniform half _WIND_GUST_AMPLITUDE;
uniform half _WIND_GUST_AUDIO_STRENGTH;
uniform half _WIND_GUST_AUDIO_STRENGTH_HIGH;
uniform half _WIND_GUST_AUDIO_STRENGTH_LOW;
uniform half _WIND_GUST_AUDIO_STRENGTH_MID;
uniform half _WIND_GUST_AUDIO_STRENGTH_VERYHIGH;
uniform half _WIND_GUST_BRANCH_CYCLE_TIME;
uniform half _WIND_GUST_BRANCH_FIELD_SIZE;
uniform half _WIND_GUST_BRANCH_STRENGTH;
uniform half _WIND_GUST_BRANCH_STRENGTH_OPPOSITE;
uniform half _WIND_GUST_BRANCH_STRENGTH_PARALLEL;
uniform half _WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR;
uniform half _WIND_GUST_BRANCH_VARIATION_STRENGTH;
uniform half _WIND_GUST_GRASS_CYCLE_TIME;
uniform half _WIND_GUST_GRASS_FIELD_SIZE;
uniform half _WIND_GUST_GRASS_MICRO_CYCLE_TIME;
uniform half _WIND_GUST_GRASS_MICRO_FIELD_SIZE;
uniform half _WIND_GUST_GRASS_MICRO_STRENGTH;
uniform half _WIND_GUST_GRASS_MID_CYCLE_TIME;
uniform half _WIND_GUST_GRASS_MID_FIELD_SIZE;
uniform half _WIND_GUST_GRASS_MID_STRENGTH;
uniform half _WIND_GUST_GRASS_STRENGTH;
uniform half _WIND_GUST_LEAF_CYCLE_TIME;
uniform half _WIND_GUST_LEAF_FIELD_SIZE;
uniform half _WIND_GUST_LEAF_MICRO_CYCLE_TIME;
uniform half _WIND_GUST_LEAF_MICRO_FIELD_SIZE;
uniform half _WIND_GUST_LEAF_MICRO_STRENGTH;
uniform half _WIND_GUST_LEAF_MID_CYCLE_TIME;
uniform half _WIND_GUST_LEAF_MID_FIELD_SIZE;
uniform half _WIND_GUST_LEAF_MID_STRENGTH;
uniform half _WIND_GUST_LEAF_STRENGTH;
uniform half _WIND_GUST_PLANT_CYCLE_TIME;
uniform half _WIND_GUST_PLANT_FIELD_SIZE;
uniform half _WIND_GUST_PLANT_MICRO_CYCLE_TIME;
uniform half _WIND_GUST_PLANT_MICRO_FIELD_SIZE;
uniform half _WIND_GUST_PLANT_MICRO_STRENGTH;
uniform half _WIND_GUST_PLANT_MID_CYCLE_TIME;
uniform half _WIND_GUST_PLANT_MID_FIELD_SIZE;
uniform half _WIND_GUST_PLANT_MID_STRENGTH;
uniform half _WIND_GUST_PLANT_STRENGTH;
uniform half _WIND_GUST_TRUNK_CYCLE_TIME;
uniform half _WIND_GUST_TRUNK_FIELD_SIZE;
uniform half _WIND_GUST_TRUNK_STRENGTH;
uniform half _WIND_LEAF_STRENGTH;
uniform half _WIND_PLANT_STRENGTH;
uniform half _WIND_TRUNK_STRENGTH;
uniform half3 _WIND_DIRECTION;
uniform sampler2D _TOUCHBEND_CURRENT_STATE_MAP_MASK;
uniform sampler2D _TOUCHBEND_CURRENT_STATE_MAP_MOTION;
uniform sampler2D _TOUCHBEND_CURRENT_STATE_MAP_SPATIAL;
uniform sampler2D _WIND_GUST_TEXTURE;	
uniform sampler2D _WindMask;
uniform float4 _WindMask_ST;
		
uniform float _Grounded;
uniform float _GroundDisplacementHeightCutoff;
uniform float _GroundDisplacementHeightFadeRange;
uniform float _GroundFadeStartX;
uniform float _GroundFadeDistanceX;
uniform float _GroundFadePowerX;
uniform float _GroundDisplacementX;
uniform float3 _GroundDisplacementDirection;
uniform float _GroundFadeStartZ;
uniform float _GroundFadeDistanceZ;
uniform float _GroundFadePowerZ;
uniform float _GroundDisplacementZ;


struct appdata_full_custom
{
    float4 vertex : POSITION;
    float4 tangent : TANGENT;
    float3 normal : NORMAL;
    float4 texcoord : TEXCOORD0;
    float4 texcoord1 : TEXCOORD1;
    float4 texcoord2 : TEXCOORD2;
    float4 texcoord3 : TEXCOORD3;
    fixed4 color : COLOR;
    UNITY_VERTEX_INPUT_INSTANCE_ID
    float4 ase_texcoord4 : TEXCOORD4;
};
		
void vertexDataFunc_standard( inout appdata_full v )
{
    float3 ase_vertex3Pos = v.vertex.xyz;
    float height70_g19957 = ase_vertex3Pos.y;
    float height_cutoff67_g19957 = _GroundDisplacementHeightCutoff;
    float3 vec3_zero73_g19957 = float3(0,0,0);
    float height_fade_range68_g19957 = _GroundDisplacementHeightFadeRange;
    float height_fade_start69_g19957 = ( height_cutoff67_g19957 - height_fade_range68_g19957 );
    float3 temp_output_46_0_g19957 = min( ( pow( saturate( ( ( abs( ase_vertex3Pos.x ) - _GroundFadeStartX ) / _GroundFadeDistanceX ) ) , _GroundFadePowerX ) * _GroundDisplacementX * _GroundDisplacementDirection ) , ( pow( saturate( ( ( abs( ase_vertex3Pos.z ) - _GroundFadeStartZ ) / _GroundFadeDistanceZ ) ) , _GroundFadePowerZ ) * _GroundDisplacementZ * _GroundDisplacementDirection ) );
    float height_fade_strength84_g19957 = ( 1.0 - ( ( height70_g19957 - height_fade_start69_g19957 ) / height_fade_range68_g19957 ) );
    float3 lerpResult1_g19958 = lerp( vec3_zero73_g19957 , temp_output_46_0_g19957 , saturate( height_fade_strength84_g19957 ));
    
    float3 staticSwitch225 = float3( 0,0,0 );
    #ifdef _GROUNDED_ON
        staticSwitch225 = (( height70_g19957 > height_cutoff67_g19957 ) ? vec3_zero73_g19957 :  (( height70_g19957 > height_fade_start69_g19957 ) ? lerpResult1_g19958 :  temp_output_46_0_g19957 ) );
    #else
        if (_Grounded > 0)
        {
            staticSwitch225 = (( height70_g19957 > height_cutoff67_g19957 ) ? vec3_zero73_g19957 :  (( height70_g19957 > height_fade_start69_g19957 ) ? lerpResult1_g19958 :  temp_output_46_0_g19957 ) );
        }
    #endif
    v.vertex.xyz += staticSwitch225;
    
}

void vertexDataFunc_leaf( inout appdata_full_custom v )
{    
    float WIND_TRUNK_STRENGTH1235_g26354 = _WIND_TRUNK_STRENGTH;
    half localunity_ObjectToWorld0w1_g26473 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g26473 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g26473 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g26473 = (float3(localunity_ObjectToWorld0w1_g26473 , localunity_ObjectToWorld1w2_g26473 , localunity_ObjectToWorld2w3_g26473));
    float3 WIND_POSITION_OBJECT1195_g26354 = appendResult6_g26473;
    float2 temp_output_1_0_g26413 = (WIND_POSITION_OBJECT1195_g26354).xz;
    float WIND_BASE_TRUNK_FIELD_SIZE1238_g26354 = _WIND_BASE_TRUNK_FIELD_SIZE;
    float temp_output_2_0_g26419 = WIND_BASE_TRUNK_FIELD_SIZE1238_g26354;
    float2 temp_cast_0 = (( 1.0 / (( temp_output_2_0_g26419 == 0.0 ) ? 1.0 :  temp_output_2_0_g26419 ) )).xx;
    float2 temp_output_2_0_g26413 = temp_cast_0;
    float2 temp_output_704_0_g26406 = ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g26413 / temp_output_2_0_g26413 ) :  ( temp_output_1_0_g26413 * temp_output_2_0_g26413 ) ) + float2( 0,0 ) );
    float temp_output_2_0_g26429 = _WIND_BASE_TRUNK_CYCLE_TIME;
    float WIND_BASE_TRUNK_FREQUENCY1237_g26354 = ( 1.0 / (( temp_output_2_0_g26429 == 0.0 ) ? 1.0 :  temp_output_2_0_g26429 ) );
    float2 temp_output_721_0_g26406 = (WIND_BASE_TRUNK_FREQUENCY1237_g26354).xx;
    float2 break298_g26415 = ( temp_output_704_0_g26406 + ( temp_output_721_0_g26406 * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26415 = (float2(sin( break298_g26415.x ) , cos( break298_g26415.y )));
    float4 temp_output_273_0_g26415 = (-1.0).xxxx;
    float4 temp_output_271_0_g26415 = (1.0).xxxx;
    float2 clampResult26_g26415 = clamp( appendResult299_g26415 , temp_output_273_0_g26415.xy , temp_output_271_0_g26415.xy );
    float WIND_BASE_AMPLITUDE1197_g26354 = _WIND_BASE_AMPLITUDE;
    float WIND_BASE_TRUNK_STRENGTH1236_g26354 = _WIND_BASE_TRUNK_STRENGTH;
    float2 temp_output_720_0_g26406 = (( WIND_BASE_AMPLITUDE1197_g26354 * WIND_BASE_TRUNK_STRENGTH1236_g26354 )).xx;
    float2 TRUNK_PIVOT_ROCKING701_g26406 = ( clampResult26_g26415 * temp_output_720_0_g26406 );
    float WIND_PRIMARY_ROLL1202_g26354 = v.color.r;
    float _WIND_PRIMARY_ROLL669_g26406 = WIND_PRIMARY_ROLL1202_g26354;
    float temp_output_54_0_g26414 = ( TRUNK_PIVOT_ROCKING701_g26406 * 0.05 * _WIND_PRIMARY_ROLL669_g26406 ).x;
    float temp_output_72_0_g26414 = cos( temp_output_54_0_g26414 );
    float one_minus_c52_g26414 = ( 1.0 - temp_output_72_0_g26414 );
    float3 break70_g26414 = float3(0,1,0);
    float axis_x25_g26414 = break70_g26414.x;
    float c66_g26414 = temp_output_72_0_g26414;
    float axis_y37_g26414 = break70_g26414.y;
    float axis_z29_g26414 = break70_g26414.z;
    float s67_g26414 = sin( temp_output_54_0_g26414 );
    float3 appendResult83_g26414 = (float3(( ( one_minus_c52_g26414 * axis_x25_g26414 * axis_x25_g26414 ) + c66_g26414 ) , ( ( one_minus_c52_g26414 * axis_x25_g26414 * axis_y37_g26414 ) - ( axis_z29_g26414 * s67_g26414 ) ) , ( ( one_minus_c52_g26414 * axis_z29_g26414 * axis_x25_g26414 ) + ( axis_y37_g26414 * s67_g26414 ) )));
    float3 appendResult81_g26414 = (float3(( ( one_minus_c52_g26414 * axis_x25_g26414 * axis_y37_g26414 ) + ( axis_z29_g26414 * s67_g26414 ) ) , ( ( one_minus_c52_g26414 * axis_y37_g26414 * axis_y37_g26414 ) + c66_g26414 ) , ( ( one_minus_c52_g26414 * axis_y37_g26414 * axis_z29_g26414 ) - ( axis_x25_g26414 * s67_g26414 ) )));
    float3 appendResult82_g26414 = (float3(( ( one_minus_c52_g26414 * axis_z29_g26414 * axis_x25_g26414 ) - ( axis_y37_g26414 * s67_g26414 ) ) , ( ( one_minus_c52_g26414 * axis_y37_g26414 * axis_z29_g26414 ) + ( axis_x25_g26414 * s67_g26414 ) ) , ( ( one_minus_c52_g26414 * axis_z29_g26414 * axis_z29_g26414 ) + c66_g26414 )));
    float3 ase_vertex3Pos = v.vertex.xyz;
    float3 WIND_PRIMARY_PIVOT1203_g26354 = (v.texcoord1).xyz;
    float3 _WIND_PRIMARY_PIVOT655_g26406 = WIND_PRIMARY_PIVOT1203_g26354;
    float3 temp_output_38_0_g26414 = ( ase_vertex3Pos - (_WIND_PRIMARY_PIVOT655_g26406).xyz );
    float2 break298_g26409 = ( temp_output_704_0_g26406 + ( temp_output_721_0_g26406 * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26409 = (float2(sin( break298_g26409.x ) , cos( break298_g26409.y )));
    float4 temp_output_273_0_g26409 = (-1.0).xxxx;
    float4 temp_output_271_0_g26409 = (1.0).xxxx;
    float2 clampResult26_g26409 = clamp( appendResult299_g26409 , temp_output_273_0_g26409.xy , temp_output_271_0_g26409.xy );
    float2 TRUNK_SWIRL700_g26406 = ( clampResult26_g26409 * temp_output_720_0_g26406 );
    float2 break699_g26406 = TRUNK_SWIRL700_g26406;
    float3 appendResult698_g26406 = (float3(break699_g26406.x , 0.0 , break699_g26406.y));
    float3 temp_output_694_0_g26406 = ( ( mul( float3x3(appendResult83_g26414, appendResult81_g26414, appendResult82_g26414), temp_output_38_0_g26414 ) - temp_output_38_0_g26414 ) + ( _WIND_PRIMARY_ROLL669_g26406 * appendResult698_g26406 * 0.5 ) );
    float lerpResult632_g26423 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_STRENGTH1242_g26354 = lerpResult632_g26423;
    float temp_output_15_0_g26491 = WIND_GUST_AUDIO_STRENGTH1242_g26354;
    float lerpResult635_g26423 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_LOW , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_LOW1246_g26354 = lerpResult635_g26423;
    float temp_output_16_0_g26491 = WIND_GUST_AUDIO_LOW1246_g26354;
    float WIND_GUST_TRUNK_STRENGTH1240_g26354 = _WIND_GUST_TRUNK_STRENGTH;
    float4 color658_g26382 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_TRUNK_CYCLE_TIME1241_g26354 = _WIND_GUST_TRUNK_CYCLE_TIME;
    float temp_output_2_0_g26383 = WIND_GUST_TRUNK_CYCLE_TIME1241_g26354;
    float2 temp_cast_6 = (( 1.0 / (( temp_output_2_0_g26383 == 0.0 ) ? 1.0 :  temp_output_2_0_g26383 ) )).xx;
    float2 temp_output_61_0_g26392 = float2( 0,0 );
    float2 temp_output_1_0_g26393 = (WIND_POSITION_OBJECT1195_g26354).xz;
    float WIND_GUST_TRUNK_FIELD_SIZE1239_g26354 = _WIND_GUST_TRUNK_FIELD_SIZE;
    float temp_output_2_0_g26388 = WIND_GUST_TRUNK_FIELD_SIZE1239_g26354;
    float temp_output_40_0_g26392 = ( 1.0 / (( temp_output_2_0_g26388 == 0.0 ) ? 1.0 :  temp_output_2_0_g26388 ) );
    float2 temp_cast_7 = (temp_output_40_0_g26392).xx;
    float2 temp_output_2_0_g26393 = temp_cast_7;
    float2 panner90_g26392 = ( _Time.y * temp_cast_6 + ( (( temp_output_61_0_g26392 > float2( 0,0 ) ) ? ( temp_output_1_0_g26393 / temp_output_2_0_g26393 ) :  ( temp_output_1_0_g26393 * temp_output_2_0_g26393 ) ) + temp_output_61_0_g26392 ));
    float temp_output_679_0_g26382 = 1.0;
    float4 temp_cast_8 = (temp_output_679_0_g26382).xxxx;
    float4 temp_output_52_0_g26392 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26392, 0, 0.0) ) , temp_cast_8 ) );
    float4 lerpResult656_g26382 = lerp( color658_g26382 , temp_output_52_0_g26392 , temp_output_679_0_g26382);
    float4 break655_g26382 = lerpResult656_g26382;
    float4 _Vector0 = float4(0,0,0,0);
    float4 _Vector1 = float4(1,1,1,1);
    float _TRUNK1350_g26354 = ( ( ( temp_output_15_0_g26491 + temp_output_16_0_g26491 ) / 2.0 ) * WIND_GUST_TRUNK_STRENGTH1240_g26354 * (-0.45 + (( 1.0 - break655_g26382.b ) - _Vector0.x) * (1.0 - -0.45) / (_Vector1.x - _Vector0.x)) );
    float _WIND_GUST_STRENGTH703_g26406 = _TRUNK1350_g26354;
    float WIND_PRIMARY_BEND1204_g26354 = v.texcoord1.w;
    float _WIND_PRIMARY_BEND662_g26406 = WIND_PRIMARY_BEND1204_g26354;
    float temp_output_54_0_g26407 = ( ( _WIND_GUST_STRENGTH703_g26406 * -1.0 ) * _WIND_PRIMARY_BEND662_g26406 );
    float temp_output_72_0_g26407 = cos( temp_output_54_0_g26407 );
    float one_minus_c52_g26407 = ( 1.0 - temp_output_72_0_g26407 );
    float3 WIND_DIRECTION1192_g26354 = _WIND_DIRECTION;
    float3 _WIND_DIRECTION671_g26406 = WIND_DIRECTION1192_g26354;
    float3 worldToObjDir719_g26406 = mul( unity_WorldToObject, float4( cross( _WIND_DIRECTION671_g26406 , float3(0,1,0) ), 0 ) ).xyz;
    float3 break70_g26407 = worldToObjDir719_g26406;
    float axis_x25_g26407 = break70_g26407.x;
    float c66_g26407 = temp_output_72_0_g26407;
    float axis_y37_g26407 = break70_g26407.y;
    float axis_z29_g26407 = break70_g26407.z;
    float s67_g26407 = sin( temp_output_54_0_g26407 );
    float3 appendResult83_g26407 = (float3(( ( one_minus_c52_g26407 * axis_x25_g26407 * axis_x25_g26407 ) + c66_g26407 ) , ( ( one_minus_c52_g26407 * axis_x25_g26407 * axis_y37_g26407 ) - ( axis_z29_g26407 * s67_g26407 ) ) , ( ( one_minus_c52_g26407 * axis_z29_g26407 * axis_x25_g26407 ) + ( axis_y37_g26407 * s67_g26407 ) )));
    float3 appendResult81_g26407 = (float3(( ( one_minus_c52_g26407 * axis_x25_g26407 * axis_y37_g26407 ) + ( axis_z29_g26407 * s67_g26407 ) ) , ( ( one_minus_c52_g26407 * axis_y37_g26407 * axis_y37_g26407 ) + c66_g26407 ) , ( ( one_minus_c52_g26407 * axis_y37_g26407 * axis_z29_g26407 ) - ( axis_x25_g26407 * s67_g26407 ) )));
    float3 appendResult82_g26407 = (float3(( ( one_minus_c52_g26407 * axis_z29_g26407 * axis_x25_g26407 ) - ( axis_y37_g26407 * s67_g26407 ) ) , ( ( one_minus_c52_g26407 * axis_y37_g26407 * axis_z29_g26407 ) + ( axis_x25_g26407 * s67_g26407 ) ) , ( ( one_minus_c52_g26407 * axis_z29_g26407 * axis_z29_g26407 ) + c66_g26407 )));
    float3 temp_output_38_0_g26407 = ( ase_vertex3Pos - (_WIND_PRIMARY_PIVOT655_g26406).xyz );
    float3 lerpResult538_g26406 = lerp( temp_output_694_0_g26406 , ( temp_output_694_0_g26406 + ( mul( float3x3(appendResult83_g26407, appendResult81_g26407, appendResult82_g26407), temp_output_38_0_g26407 ) - temp_output_38_0_g26407 ) ) , WIND_GUST_AUDIO_STRENGTH1242_g26354);
    float3 MOTION_TRUNK1337_g26354 = lerpResult538_g26406;
    float WIND_BRANCH_STRENGTH1224_g26354 = _WIND_BRANCH_STRENGTH;
    float3 _WIND_POSITION_ROOT1002_g26523 = WIND_POSITION_OBJECT1195_g26354;
    float2 temp_output_1_0_g26546 = (_WIND_POSITION_ROOT1002_g26523).xz;
    float WIND_BASE_BRANCH_FIELD_SIZE1218_g26354 = _WIND_BASE_BRANCH_FIELD_SIZE;
    float _WIND_BASE_BRANCH_FIELD_SIZE1004_g26523 = WIND_BASE_BRANCH_FIELD_SIZE1218_g26354;
    float temp_output_2_0_g26553 = _WIND_BASE_BRANCH_FIELD_SIZE1004_g26523;
    float2 temp_cast_11 = (( 1.0 / (( temp_output_2_0_g26553 == 0.0 ) ? 1.0 :  temp_output_2_0_g26553 ) )).xx;
    float2 temp_output_2_0_g26546 = temp_cast_11;
    float temp_output_587_552_g26457 = v.color.a;
    float WIND_PHASE1212_g26354 = temp_output_587_552_g26457;
    float _WIND_PHASE852_g26523 = WIND_PHASE1212_g26354;
    float WIND_BASE_BRANCH_VARIATION_STRENGTH1219_g26354 = _WIND_BASE_BRANCH_VARIATION_STRENGTH;
    float _WIND_BASE_BRANCH_VARIATION_STRENGTH1006_g26523 = WIND_BASE_BRANCH_VARIATION_STRENGTH1219_g26354;
    float2 temp_cast_12 = (( ( _WIND_PHASE852_g26523 * _WIND_BASE_BRANCH_VARIATION_STRENGTH1006_g26523 ) * UNITY_PI )).xx;
    float temp_output_2_0_g26494 = _WIND_BASE_BRANCH_CYCLE_TIME;
    float WIND_BASE_BRANCH_FREQUENCY1217_g26354 = ( 1.0 / (( temp_output_2_0_g26494 == 0.0 ) ? 1.0 :  temp_output_2_0_g26494 ) );
    float2 break298_g26542 = ( ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g26546 / temp_output_2_0_g26546 ) :  ( temp_output_1_0_g26546 * temp_output_2_0_g26546 ) ) + temp_cast_12 ) + ( (( WIND_BASE_BRANCH_FREQUENCY1217_g26354 * _WIND_PHASE852_g26523 )).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26542 = (float2(sin( break298_g26542.x ) , cos( break298_g26542.y )));
    float4 temp_output_273_0_g26542 = (-1.0).xxxx;
    float4 temp_output_271_0_g26542 = (1.0).xxxx;
    float2 clampResult26_g26542 = clamp( appendResult299_g26542 , temp_output_273_0_g26542.xy , temp_output_271_0_g26542.xy );
    float WIND_BASE_BRANCH_STRENGTH1227_g26354 = _WIND_BASE_BRANCH_STRENGTH;
    float2 BRANCH_SWIRL931_g26523 = ( clampResult26_g26542 * (( WIND_BASE_AMPLITUDE1197_g26354 * WIND_BASE_BRANCH_STRENGTH1227_g26354 )).xx );
    float2 break932_g26523 = BRANCH_SWIRL931_g26523;
    float3 appendResult933_g26523 = (float3(break932_g26523.x , 0.0 , break932_g26523.y));
    float WIND_SECONDARY_ROLL1205_g26354 = v.color.g;
    float _WIND_SECONDARY_ROLL650_g26523 = WIND_SECONDARY_ROLL1205_g26354;
    float3 VALUE_ROLL1034_g26523 = ( appendResult933_g26523 * _WIND_SECONDARY_ROLL650_g26523 * 0.5 );
    float3 _WIND_DIRECTION856_g26523 = WIND_DIRECTION1192_g26354;
    float3 WIND_SECONDARY_GROWTH_DIRECTION1208_g26354 = (v.texcoord2).xyz;
    float3 temp_output_839_0_g26523 = WIND_SECONDARY_GROWTH_DIRECTION1208_g26354;
    float3 _WIND_SECONDARY_GROWTH_DIRECTION = float3(0,1,0);
    float3 objToWorldDir1174_g26523 = mul( unity_ObjectToWorld, float4( (( length( temp_output_839_0_g26523 ) == 0.0 ) ? _WIND_SECONDARY_GROWTH_DIRECTION :  temp_output_839_0_g26523 ), 0 ) ).xyz;
    float3 _WIND_SECONDARY_GROWTH_DIRECTION840_g26523 = (objToWorldDir1174_g26523).xyz;
    float dotResult565_g26523 = dot( _WIND_DIRECTION856_g26523 , _WIND_SECONDARY_GROWTH_DIRECTION840_g26523 );
    float clampResult13_g26535 = clamp( dotResult565_g26523 , -1.0 , 1.0 );
    float4 color658_g26370 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_BRANCH_CYCLE_TIME1220_g26354 = _WIND_GUST_BRANCH_CYCLE_TIME;
    float clampResult3_g26466 = clamp( temp_output_587_552_g26457 , 0.0 , 1.0 );
    float WIND_PHASE_UNPACKED1530_g26354 = ( ( clampResult3_g26466 * 2.0 ) - 1.0 );
    float temp_output_2_0_g26371 = ( WIND_GUST_BRANCH_CYCLE_TIME1220_g26354 + ( WIND_GUST_BRANCH_CYCLE_TIME1220_g26354 * WIND_PHASE_UNPACKED1530_g26354 * 0.1 ) );
    float2 temp_cast_15 = (( 1.0 / (( temp_output_2_0_g26371 == 0.0 ) ? 1.0 :  temp_output_2_0_g26371 ) )).xx;
    float2 temp_output_61_0_g26380 = float2( 0,0 );
    float3 WIND_SECONDARY_PIVOT1206_g26354 = (v.texcoord3).xyz;
    float WIND_GUST_BRANCH_VARIATION_STRENGTH1223_g26354 = _WIND_GUST_BRANCH_VARIATION_STRENGTH;
    float2 temp_output_1_0_g26381 = ( (WIND_POSITION_OBJECT1195_g26354).xz + (WIND_SECONDARY_PIVOT1206_g26354).xy + ( WIND_PHASE1212_g26354 * WIND_GUST_BRANCH_VARIATION_STRENGTH1223_g26354 ) );
    float WIND_GUST_BRANCH_FIELD_SIZE1222_g26354 = _WIND_GUST_BRANCH_FIELD_SIZE;
    float temp_output_2_0_g26376 = WIND_GUST_BRANCH_FIELD_SIZE1222_g26354;
    float temp_output_40_0_g26380 = ( 1.0 / (( temp_output_2_0_g26376 == 0.0 ) ? 1.0 :  temp_output_2_0_g26376 ) );
    float2 temp_cast_16 = (temp_output_40_0_g26380).xx;
    float2 temp_output_2_0_g26381 = temp_cast_16;
    float2 panner90_g26380 = ( _Time.y * temp_cast_15 + ( (( temp_output_61_0_g26380 > float2( 0,0 ) ) ? ( temp_output_1_0_g26381 / temp_output_2_0_g26381 ) :  ( temp_output_1_0_g26381 * temp_output_2_0_g26381 ) ) + temp_output_61_0_g26380 ));
    float temp_output_679_0_g26370 = 1.0;
    float4 temp_cast_17 = (temp_output_679_0_g26370).xxxx;
    float4 temp_output_52_0_g26380 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26380, 0, 0.0) ) , temp_cast_17 ) );
    float4 lerpResult656_g26370 = lerp( color658_g26370 , temp_output_52_0_g26380 , temp_output_679_0_g26370);
    float4 break655_g26370 = lerpResult656_g26370;
    float temp_output_15_0_g26471 = break655_g26370.r;
    float temp_output_16_0_g26471 = ( 1.0 - break655_g26370.b );
    float temp_output_15_0_g26502 = WIND_GUST_AUDIO_STRENGTH1242_g26354;
    float lerpResult634_g26423 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_MID , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_MID1245_g26354 = lerpResult634_g26423;
    float temp_output_16_0_g26502 = WIND_GUST_AUDIO_MID1245_g26354;
    float temp_output_1516_14_g26354 = ( ( temp_output_15_0_g26502 + temp_output_16_0_g26502 ) / 2.0 );
    float WIND_GUST_BRANCH_STRENGTH1229_g26354 = _WIND_GUST_BRANCH_STRENGTH;
    float WIND_GUST_BRANCH_STRENGTH_OPPOSITE1573_g26354 = _WIND_GUST_BRANCH_STRENGTH_OPPOSITE;
    float _BRANCH_OPPOSITE_DOWN1466_g26354 = ( (-0.1 + (( ( temp_output_15_0_g26471 + temp_output_16_0_g26471 ) / 2.0 ) - _Vector0.x) * (0.75 - -0.1) / (_Vector1.x - _Vector0.x)) * temp_output_1516_14_g26354 * WIND_GUST_BRANCH_STRENGTH1229_g26354 * WIND_GUST_BRANCH_STRENGTH_OPPOSITE1573_g26354 );
    float _GUST_STRENGTH_OPPOSITE_DOWN1188_g26523 = _BRANCH_OPPOSITE_DOWN1466_g26354;
    float temp_output_15_0_g26454 = ( 1.0 - break655_g26370.g );
    float temp_output_16_0_g26454 = break655_g26370.a;
    float _BRANCH_OPPOSITE_UP1348_g26354 = ( (-0.3 + (( ( temp_output_15_0_g26454 + temp_output_16_0_g26454 ) / 2.0 ) - _Vector0.x) * (1.0 - -0.3) / (_Vector1.x - _Vector0.x)) * temp_output_1516_14_g26354 * WIND_GUST_BRANCH_STRENGTH1229_g26354 * WIND_GUST_BRANCH_STRENGTH_OPPOSITE1573_g26354 );
    float _GUST_STRENGTH_OPPOSITE_UP871_g26523 = _BRANCH_OPPOSITE_UP1348_g26354;
    float dotResult1180_g26523 = dot( _WIND_SECONDARY_GROWTH_DIRECTION840_g26523 , float3(0,1,0) );
    float clampResult8_g26547 = clamp( dotResult1180_g26523 , -1.0 , 1.0 );
    float _WIND_SECONDARY_VERTICALITY843_g26523 = ( ( clampResult8_g26547 * 0.5 ) + 0.5 );
    float temp_output_2_0_g26549 = _WIND_SECONDARY_VERTICALITY843_g26523;
    float temp_output_3_0_g26549 = 0.5;
    float temp_output_21_0_g26549 = 1.0;
    float temp_output_26_0_g26549 = 0.0;
    float lerpResult1_g26558 = lerp( _GUST_STRENGTH_OPPOSITE_DOWN1188_g26523 , ( _GUST_STRENGTH_OPPOSITE_UP871_g26523 * -1.0 ) , saturate( saturate( (( temp_output_2_0_g26549 >= temp_output_3_0_g26549 ) ? temp_output_21_0_g26549 :  temp_output_26_0_g26549 ) ) ));
    float WIND_SECONDARY_BEND1207_g26354 = v.texcoord3.w;
    float _WIND_SECONDARY_BEND849_g26523 = WIND_SECONDARY_BEND1207_g26354;
    float clampResult1170_g26523 = clamp( _WIND_SECONDARY_BEND849_g26523 , 0.0 , 0.75 );
    float clampResult1175_g26523 = clamp( ( lerpResult1_g26558 * clampResult1170_g26523 ) , -1.5 , 1.5 );
    float temp_output_54_0_g26529 = clampResult1175_g26523;
    float temp_output_72_0_g26529 = cos( temp_output_54_0_g26529 );
    float one_minus_c52_g26529 = ( 1.0 - temp_output_72_0_g26529 );
    float3 worldToObjDir1173_g26523 = mul( unity_WorldToObject, float4( cross( _WIND_DIRECTION856_g26523 , float3(0,1,0) ), 0 ) ).xyz;
    float3 break70_g26529 = worldToObjDir1173_g26523;
    float axis_x25_g26529 = break70_g26529.x;
    float c66_g26529 = temp_output_72_0_g26529;
    float axis_y37_g26529 = break70_g26529.y;
    float axis_z29_g26529 = break70_g26529.z;
    float s67_g26529 = sin( temp_output_54_0_g26529 );
    float3 appendResult83_g26529 = (float3(( ( one_minus_c52_g26529 * axis_x25_g26529 * axis_x25_g26529 ) + c66_g26529 ) , ( ( one_minus_c52_g26529 * axis_x25_g26529 * axis_y37_g26529 ) - ( axis_z29_g26529 * s67_g26529 ) ) , ( ( one_minus_c52_g26529 * axis_z29_g26529 * axis_x25_g26529 ) + ( axis_y37_g26529 * s67_g26529 ) )));
    float3 appendResult81_g26529 = (float3(( ( one_minus_c52_g26529 * axis_x25_g26529 * axis_y37_g26529 ) + ( axis_z29_g26529 * s67_g26529 ) ) , ( ( one_minus_c52_g26529 * axis_y37_g26529 * axis_y37_g26529 ) + c66_g26529 ) , ( ( one_minus_c52_g26529 * axis_y37_g26529 * axis_z29_g26529 ) - ( axis_x25_g26529 * s67_g26529 ) )));
    float3 appendResult82_g26529 = (float3(( ( one_minus_c52_g26529 * axis_z29_g26529 * axis_x25_g26529 ) - ( axis_y37_g26529 * s67_g26529 ) ) , ( ( one_minus_c52_g26529 * axis_y37_g26529 * axis_z29_g26529 ) + ( axis_x25_g26529 * s67_g26529 ) ) , ( ( one_minus_c52_g26529 * axis_z29_g26529 * axis_z29_g26529 ) + c66_g26529 )));
    float3 _WIND_SECONDARY_PIVOT846_g26523 = WIND_SECONDARY_PIVOT1206_g26354;
    float3 temp_output_38_0_g26529 = ( ase_vertex3Pos - (_WIND_SECONDARY_PIVOT846_g26523).xyz );
    float3 VALUE_FACING_WIND1042_g26523 = ( mul( float3x3(appendResult83_g26529, appendResult81_g26529, appendResult82_g26529), temp_output_38_0_g26529 ) - temp_output_38_0_g26529 );
    float2 temp_output_1_0_g26524 = (_WIND_SECONDARY_PIVOT846_g26523).xz;
    float _WIND_GUST_BRANCH_FIELD_SIZE1011_g26523 = WIND_GUST_BRANCH_FIELD_SIZE1222_g26354;
    float temp_output_2_0_g26531 = _WIND_GUST_BRANCH_FIELD_SIZE1011_g26523;
    float2 temp_cast_22 = (( 1.0 / (( temp_output_2_0_g26531 == 0.0 ) ? 1.0 :  temp_output_2_0_g26531 ) )).xx;
    float2 temp_output_2_0_g26524 = temp_cast_22;
    float _WIND_GUST_BRANCH_VARIATION_STRENGTH1008_g26523 = WIND_GUST_BRANCH_VARIATION_STRENGTH1223_g26354;
    float2 temp_cast_23 = (( ( _WIND_PHASE852_g26523 * _WIND_GUST_BRANCH_VARIATION_STRENGTH1008_g26523 ) * UNITY_PI )).xx;
    float temp_output_2_0_g26498 = _WIND_GUST_BRANCH_CYCLE_TIME;
    float WIND_GUST_BRANCH_FREQUENCY1221_g26354 = ( 1.0 / (( temp_output_2_0_g26498 == 0.0 ) ? 1.0 :  temp_output_2_0_g26498 ) );
    float _WIND_GUST_BRANCH_FREQUENCY1012_g26523 = WIND_GUST_BRANCH_FREQUENCY1221_g26354;
    float2 break298_g26525 = ( ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g26524 / temp_output_2_0_g26524 ) :  ( temp_output_1_0_g26524 * temp_output_2_0_g26524 ) ) + temp_cast_23 ) + ( (_WIND_GUST_BRANCH_FREQUENCY1012_g26523).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26525 = (float2(sin( break298_g26525.x ) , cos( break298_g26525.y )));
    float4 temp_output_273_0_g26525 = (-1.0).xxxx;
    float4 temp_output_271_0_g26525 = (1.0).xxxx;
    float2 clampResult26_g26525 = clamp( appendResult299_g26525 , temp_output_273_0_g26525.xy , temp_output_271_0_g26525.xy );
    float2 break305_g26525 = float2( -0.25,1 );
    float temp_output_15_0_g26470 = ( 1.0 - break655_g26370.r );
    float temp_output_16_0_g26470 = break655_g26370.g;
    float WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR1574_g26354 = _WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR;
    float _BRANCH_PERPENDICULAR1431_g26354 = ( (-0.1 + (( ( temp_output_15_0_g26470 + temp_output_16_0_g26470 ) / 2.0 ) - _Vector0.x) * (0.9 - -0.1) / (_Vector1.x - _Vector0.x)) * temp_output_1516_14_g26354 * WIND_GUST_BRANCH_STRENGTH1229_g26354 * WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR1574_g26354 );
    float _GUST_STRENGTH_PERPENDICULAR999_g26523 = _BRANCH_PERPENDICULAR1431_g26354;
    float2 break1067_g26523 = ( ( ((break305_g26525.x).xxxx.xy + (clampResult26_g26525 - temp_output_273_0_g26525.xy) * ((break305_g26525.y).xxxx.xy - (break305_g26525.x).xxxx.xy) / (temp_output_271_0_g26525.xy - temp_output_273_0_g26525.xy)) * (_GUST_STRENGTH_PERPENDICULAR999_g26523).xx ) * _WIND_SECONDARY_ROLL650_g26523 );
    float3 appendResult1066_g26523 = (float3(break1067_g26523.x , 0.0 , break1067_g26523.y));
    float3 worldToObjDir1089_g26523 = normalize( mul( unity_WorldToObject, float4( _WIND_DIRECTION856_g26523, 0 ) ).xyz );
    float3 BRANCH_SWIRL972_g26523 = ( appendResult1066_g26523 * worldToObjDir1089_g26523 );
    float3 VALUE_PERPENDICULAR1041_g26523 = BRANCH_SWIRL972_g26523;
    float3 temp_output_3_0_g26535 = VALUE_PERPENDICULAR1041_g26523;
    float3 lerpResult1_g26541 = lerp( VALUE_FACING_WIND1042_g26523 , temp_output_3_0_g26535 , saturate( ( 1.0 + clampResult13_g26535 ) ));
    float temp_output_15_0_g26357 = break655_g26370.b;
    float temp_output_16_0_g26357 = ( 1.0 - break655_g26370.a );
    float clampResult3_g26455 = clamp( ( ( temp_output_15_0_g26357 + temp_output_16_0_g26357 ) / 2.0 ) , 0.0 , 1.0 );
    float WIND_GUST_BRANCH_STRENGTH_PARALLEL1575_g26354 = _WIND_GUST_BRANCH_STRENGTH_PARALLEL;
    float _BRANCH_PARALLEL1432_g26354 = ( ( ( clampResult3_g26455 * 2.0 ) - 1.0 ) * temp_output_1516_14_g26354 * WIND_GUST_BRANCH_STRENGTH1229_g26354 * WIND_GUST_BRANCH_STRENGTH_PARALLEL1575_g26354 );
    float _GUST_STRENGTH_PARALLEL1110_g26523 = _BRANCH_PARALLEL1432_g26354;
    float clampResult1167_g26523 = clamp( ( _GUST_STRENGTH_PARALLEL1110_g26523 * _WIND_SECONDARY_BEND849_g26523 ) , -1.5 , 1.5 );
    float temp_output_54_0_g26530 = clampResult1167_g26523;
    float temp_output_72_0_g26530 = cos( temp_output_54_0_g26530 );
    float one_minus_c52_g26530 = ( 1.0 - temp_output_72_0_g26530 );
    float3 break70_g26530 = float3(0,1,0);
    float axis_x25_g26530 = break70_g26530.x;
    float c66_g26530 = temp_output_72_0_g26530;
    float axis_y37_g26530 = break70_g26530.y;
    float axis_z29_g26530 = break70_g26530.z;
    float s67_g26530 = sin( temp_output_54_0_g26530 );
    float3 appendResult83_g26530 = (float3(( ( one_minus_c52_g26530 * axis_x25_g26530 * axis_x25_g26530 ) + c66_g26530 ) , ( ( one_minus_c52_g26530 * axis_x25_g26530 * axis_y37_g26530 ) - ( axis_z29_g26530 * s67_g26530 ) ) , ( ( one_minus_c52_g26530 * axis_z29_g26530 * axis_x25_g26530 ) + ( axis_y37_g26530 * s67_g26530 ) )));
    float3 appendResult81_g26530 = (float3(( ( one_minus_c52_g26530 * axis_x25_g26530 * axis_y37_g26530 ) + ( axis_z29_g26530 * s67_g26530 ) ) , ( ( one_minus_c52_g26530 * axis_y37_g26530 * axis_y37_g26530 ) + c66_g26530 ) , ( ( one_minus_c52_g26530 * axis_y37_g26530 * axis_z29_g26530 ) - ( axis_x25_g26530 * s67_g26530 ) )));
    float3 appendResult82_g26530 = (float3(( ( one_minus_c52_g26530 * axis_z29_g26530 * axis_x25_g26530 ) - ( axis_y37_g26530 * s67_g26530 ) ) , ( ( one_minus_c52_g26530 * axis_y37_g26530 * axis_z29_g26530 ) + ( axis_x25_g26530 * s67_g26530 ) ) , ( ( one_minus_c52_g26530 * axis_z29_g26530 * axis_z29_g26530 ) + c66_g26530 )));
    float3 temp_output_38_0_g26530 = ( ase_vertex3Pos - (_WIND_SECONDARY_PIVOT846_g26523).xyz );
    float3 VALUE_AWAY_FROM_WIND1040_g26523 = ( mul( float3x3(appendResult83_g26530, appendResult81_g26530, appendResult82_g26530), temp_output_38_0_g26530 ) - temp_output_38_0_g26530 );
    float3 lerpResult1_g26536 = lerp( temp_output_3_0_g26535 , VALUE_AWAY_FROM_WIND1040_g26523 , saturate( clampResult13_g26535 ));
    float3 lerpResult631_g26523 = lerp( VALUE_ROLL1034_g26523 , (( clampResult13_g26535 < 0.0 ) ? lerpResult1_g26541 :  lerpResult1_g26536 ) , WIND_GUST_AUDIO_STRENGTH1242_g26354);
    float3 MOTION_BRANCH1339_g26354 = lerpResult631_g26523;
    float WIND_LEAF_STRENGTH1179_g26354 = _WIND_LEAF_STRENGTH;
    float temp_output_17_0_g26450 = 3.0;
    float TYPE_DESIGNATOR1209_g26354 = round( v.texcoord2.w );
    float temp_output_18_0_g26450 = TYPE_DESIGNATOR1209_g26354;
    float WIND_TERTIARY_ROLL1210_g26354 = v.color.b;
    float _WIND_TERTIARY_ROLL669_g26503 = WIND_TERTIARY_ROLL1210_g26354;
    float3 temp_output_615_0_g26472 = ( float3( 0,0,0 ) + ase_vertex3Pos );
    float3 WIND_POSITION_VERTEX_OBJECT1193_g26354 = temp_output_615_0_g26472;
    float2 temp_output_1_0_g26504 = (WIND_POSITION_VERTEX_OBJECT1193_g26354).xz;
    float WIND_BASE_LEAF_FIELD_SIZE1182_g26354 = _WIND_BASE_LEAF_FIELD_SIZE;
    float2 temp_output_2_0_g26504 = (WIND_BASE_LEAF_FIELD_SIZE1182_g26354).xx;
    float _WIND_VARIATION662_g26503 = WIND_PHASE1212_g26354;
    float2 temp_output_704_0_g26503 = ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g26504 / temp_output_2_0_g26504 ) :  ( temp_output_1_0_g26504 * temp_output_2_0_g26504 ) ) + (_WIND_VARIATION662_g26503).xx );
    float temp_output_2_0_g26479 = _WIND_BASE_LEAF_CYCLE_TIME;
    float WIND_BASE_LEAF_FREQUENCY1264_g26354 = ( 1.0 / (( temp_output_2_0_g26479 == 0.0 ) ? 1.0 :  temp_output_2_0_g26479 ) );
    float temp_output_618_0_g26503 = WIND_BASE_LEAF_FREQUENCY1264_g26354;
    float2 break298_g26505 = ( temp_output_704_0_g26503 + ( (temp_output_618_0_g26503).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26505 = (float2(sin( break298_g26505.x ) , cos( break298_g26505.y )));
    float4 temp_output_273_0_g26505 = (-1.0).xxxx;
    float4 temp_output_271_0_g26505 = (1.0).xxxx;
    float2 clampResult26_g26505 = clamp( appendResult299_g26505 , temp_output_273_0_g26505.xy , temp_output_271_0_g26505.xy );
    float WIND_BASE_LEAF_STRENGTH1180_g26354 = _WIND_BASE_LEAF_STRENGTH;
    float2 temp_output_1031_0_g26503 = (( WIND_BASE_LEAF_STRENGTH1180_g26354 * WIND_BASE_AMPLITUDE1197_g26354 )).xx;
    float2 break699_g26503 = ( clampResult26_g26505 * temp_output_1031_0_g26503 );
    float2 break298_g26509 = ( temp_output_704_0_g26503 + ( (( 0.71 * temp_output_618_0_g26503 )).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26509 = (float2(sin( break298_g26509.x ) , cos( break298_g26509.y )));
    float4 temp_output_273_0_g26509 = (-1.0).xxxx;
    float4 temp_output_271_0_g26509 = (1.0).xxxx;
    float2 clampResult26_g26509 = clamp( appendResult299_g26509 , temp_output_273_0_g26509.xy , temp_output_271_0_g26509.xy );
    float3 appendResult698_g26503 = (float3(break699_g26503.x , ( clampResult26_g26509 * temp_output_1031_0_g26503 )));
    float3 temp_output_684_0_g26503 = ( _WIND_TERTIARY_ROLL669_g26503 * appendResult698_g26503 );
    float3 _WIND_DIRECTION671_g26503 = WIND_DIRECTION1192_g26354;
    float3 worldToObjDir1006_g26503 = mul( unity_WorldToObject, float4( _WIND_DIRECTION671_g26503, 0 ) ).xyz;
    float WIND_GUST_LEAF_STRENGTH1183_g26354 = _WIND_GUST_LEAF_STRENGTH;
    float lerpResult638_g26423 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_VERYHIGH , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_VERYHIGH1243_g26354 = lerpResult638_g26423;
    float4 color658_g26433 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float2 temp_output_61_0_g26438 = float2( 0,0 );
    float WIND_VARIATION1211_g26354 = v.texcoord.w;
    half localunity_ObjectToWorld0w1_g26355 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld2w3_g26355 = ( unity_ObjectToWorld[2].w );
    float2 appendResult1374_g26354 = (float2(localunity_ObjectToWorld0w1_g26355 , localunity_ObjectToWorld2w3_g26355));
    float2 temp_output_1_0_g26439 = ( ( 10.0 * WIND_VARIATION1211_g26354 ) + appendResult1374_g26354 );
    float WIND_GUST_LEAF_FIELD_SIZE1185_g26354 = _WIND_GUST_LEAF_FIELD_SIZE;
    float temp_output_2_0_g26445 = WIND_GUST_LEAF_FIELD_SIZE1185_g26354;
    float temp_output_40_0_g26438 = ( 1.0 / (( temp_output_2_0_g26445 == 0.0 ) ? 1.0 :  temp_output_2_0_g26445 ) );
    float2 temp_cast_36 = (temp_output_40_0_g26438).xx;
    float2 temp_output_2_0_g26439 = temp_cast_36;
    float clampResult3_g26451 = clamp( WIND_VARIATION1211_g26354 , 0.0 , 1.0 );
    float WIND_GUST_LEAF_CYCLE_TIME1184_g26354 = _WIND_GUST_LEAF_CYCLE_TIME;
    float temp_output_2_0_g26434 = ( ( ( ( clampResult3_g26451 * 2.0 ) - 1.0 ) * 0.3 * WIND_GUST_LEAF_CYCLE_TIME1184_g26354 ) + WIND_GUST_LEAF_CYCLE_TIME1184_g26354 );
    float mulTime37_g26438 = _Time.y * ( 1.0 / (( temp_output_2_0_g26434 == 0.0 ) ? 1.0 :  temp_output_2_0_g26434 ) );
    float temp_output_220_0_g26441 = -1.0;
    float4 temp_cast_37 = (temp_output_220_0_g26441).xxxx;
    float temp_output_219_0_g26441 = 1.0;
    float4 temp_cast_38 = (temp_output_219_0_g26441).xxxx;
    float4 clampResult26_g26441 = clamp( sin( ( ( tex2Dlod( _WIND_GUST_TEXTURE, float4( ( (( temp_output_61_0_g26438 > float2( 0,0 ) ) ? ( temp_output_1_0_g26439 / temp_output_2_0_g26439 ) :  ( temp_output_1_0_g26439 * temp_output_2_0_g26439 ) ) + temp_output_61_0_g26438 ), 0, 0.0) ) * ( 2.0 * UNITY_PI ) ) + mulTime37_g26438 ) ) , temp_cast_37 , temp_cast_38 );
    float4 temp_cast_39 = (temp_output_220_0_g26441).xxxx;
    float4 temp_cast_40 = (temp_output_219_0_g26441).xxxx;
    float4 temp_cast_41 = (0.0).xxxx;
    float4 temp_cast_42 = (temp_output_219_0_g26441).xxxx;
    float temp_output_679_0_g26433 = 1.0;
    float4 temp_cast_43 = (temp_output_679_0_g26433).xxxx;
    float4 temp_output_52_0_g26438 = saturate( pow( abs( (temp_cast_41 + (clampResult26_g26441 - temp_cast_39) * (temp_cast_42 - temp_cast_41) / (temp_cast_40 - temp_cast_39)) ) , temp_cast_43 ) );
    float4 lerpResult656_g26433 = lerp( color658_g26433 , temp_output_52_0_g26438 , temp_output_679_0_g26433);
    float4 break655_g26433 = lerpResult656_g26433;
    float LEAF_GUST1375_g26354 = ( WIND_GUST_LEAF_STRENGTH1183_g26354 * WIND_GUST_AUDIO_VERYHIGH1243_g26354 * break655_g26433.g );
    float _WIND_GUST_STRENGTH703_g26503 = LEAF_GUST1375_g26354;
    float3 _GUST1018_g26503 = ( worldToObjDir1006_g26503 * _WIND_GUST_STRENGTH703_g26503 );
    float WIND_GUST_LEAF_MID_STRENGTH1186_g26354 = _WIND_GUST_LEAF_MID_STRENGTH;
    float lerpResult633_g26423 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_HIGH , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_HIGH1244_g26354 = lerpResult633_g26423;
    float4 color658_g26358 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_LEAF_MID_CYCLE_TIME1187_g26354 = _WIND_GUST_LEAF_MID_CYCLE_TIME;
    float temp_output_2_0_g26359 = ( WIND_GUST_LEAF_MID_CYCLE_TIME1187_g26354 + ( WIND_VARIATION1211_g26354 * -0.05 ) );
    float2 temp_cast_44 = (( 1.0 / (( temp_output_2_0_g26359 == 0.0 ) ? 1.0 :  temp_output_2_0_g26359 ) )).xx;
    float2 temp_output_61_0_g26368 = float2( 0,0 );
    float2 appendResult1400_g26354 = (float2(ase_vertex3Pos.x , ase_vertex3Pos.z));
    float2 temp_output_1_0_g26369 = ( (WIND_VARIATION1211_g26354).xx + appendResult1400_g26354 );
    float WIND_GUST_LEAF_MID_FIELD_SIZE1188_g26354 = _WIND_GUST_LEAF_MID_FIELD_SIZE;
    float temp_output_2_0_g26364 = WIND_GUST_LEAF_MID_FIELD_SIZE1188_g26354;
    float temp_output_40_0_g26368 = ( 1.0 / (( temp_output_2_0_g26364 == 0.0 ) ? 1.0 :  temp_output_2_0_g26364 ) );
    float2 temp_cast_45 = (temp_output_40_0_g26368).xx;
    float2 temp_output_2_0_g26369 = temp_cast_45;
    float2 panner90_g26368 = ( _Time.y * temp_cast_44 + ( (( temp_output_61_0_g26368 > float2( 0,0 ) ) ? ( temp_output_1_0_g26369 / temp_output_2_0_g26369 ) :  ( temp_output_1_0_g26369 * temp_output_2_0_g26369 ) ) + temp_output_61_0_g26368 ));
    float temp_output_679_0_g26358 = 1.0;
    float4 temp_cast_46 = (temp_output_679_0_g26358).xxxx;
    float4 temp_output_52_0_g26368 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26368, 0, 0.0) ) , temp_cast_46 ) );
    float4 lerpResult656_g26358 = lerp( color658_g26358 , temp_output_52_0_g26368 , temp_output_679_0_g26358);
    float4 break655_g26358 = lerpResult656_g26358;
    float temp_output_1557_630_g26354 = break655_g26358.r;
    float LEAF_GUST_MID1397_g26354 = ( WIND_GUST_LEAF_MID_STRENGTH1186_g26354 * WIND_GUST_AUDIO_HIGH1244_g26354 * temp_output_1557_630_g26354 * temp_output_1557_630_g26354 );
    float _WIND_GUST_STRENGTH_MID829_g26503 = LEAF_GUST_MID1397_g26354;
    float3 _GUST_MID1019_g26503 = ( worldToObjDir1006_g26503 * _WIND_GUST_STRENGTH_MID829_g26503 );
    float3 ase_vertexNormal = v.normal.xyz;
    float3 _LEAF_NORMAL992_g26503 = ase_vertexNormal;
    float dotResult1_g26515 = dot( worldToObjDir1006_g26503 , _LEAF_NORMAL992_g26503 );
    float clampResult13_g26516 = clamp( dotResult1_g26515 , -1.0 , 1.0 );
    float WIND_GUST_LEAF_MICRO_STRENGTH1189_g26354 = _WIND_GUST_LEAF_MICRO_STRENGTH;
    float4 color658_g26394 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_LEAF_MICRO_CYCLE_TIME1190_g26354 = _WIND_GUST_LEAF_MICRO_CYCLE_TIME;
    float temp_output_2_0_g26395 = ( WIND_GUST_LEAF_MICRO_CYCLE_TIME1190_g26354 + ( WIND_VARIATION1211_g26354 * 0.1 ) );
    float2 temp_cast_47 = (( 1.0 / (( temp_output_2_0_g26395 == 0.0 ) ? 1.0 :  temp_output_2_0_g26395 ) )).xx;
    float2 temp_output_61_0_g26404 = float2( 0,0 );
    float2 appendResult1409_g26354 = (float2(ase_vertex3Pos.y , ase_vertex3Pos.z));
    float2 temp_output_1_0_g26405 = ( (WIND_VARIATION1211_g26354).xx + appendResult1409_g26354 );
    float WIND_GUST_LEAF_MICRO_FIELD_SIZE1191_g26354 = _WIND_GUST_LEAF_MICRO_FIELD_SIZE;
    float temp_output_2_0_g26400 = WIND_GUST_LEAF_MICRO_FIELD_SIZE1191_g26354;
    float temp_output_40_0_g26404 = ( 1.0 / (( temp_output_2_0_g26400 == 0.0 ) ? 1.0 :  temp_output_2_0_g26400 ) );
    float2 temp_cast_48 = (temp_output_40_0_g26404).xx;
    float2 temp_output_2_0_g26405 = temp_cast_48;
    float2 panner90_g26404 = ( _Time.y * temp_cast_47 + ( (( temp_output_61_0_g26404 > float2( 0,0 ) ) ? ( temp_output_1_0_g26405 / temp_output_2_0_g26405 ) :  ( temp_output_1_0_g26405 * temp_output_2_0_g26405 ) ) + temp_output_61_0_g26404 ));
    float temp_output_679_0_g26394 = 1.0;
    float4 temp_cast_49 = (temp_output_679_0_g26394).xxxx;
    float4 temp_output_52_0_g26404 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26404, 0, 0.0) ) , temp_cast_49 ) );
    float4 lerpResult656_g26394 = lerp( color658_g26394 , temp_output_52_0_g26404 , temp_output_679_0_g26394);
    float4 break655_g26394 = lerpResult656_g26394;
    float LEAF_GUST_MICRO1408_g26354 = ( WIND_GUST_LEAF_MICRO_STRENGTH1189_g26354 * WIND_GUST_AUDIO_VERYHIGH1243_g26354 * break655_g26394.a );
    float _WIND_GUST_STRENGTH_MICRO851_g26503 = LEAF_GUST_MICRO1408_g26354;
    float clampResult3_g26513 = clamp( _WIND_GUST_STRENGTH_MICRO851_g26503 , 0.0 , 1.0 );
    float temp_output_3_0_g26516 = ( ( clampResult3_g26513 * 2.0 ) - 1.0 );
    float lerpResult1_g26522 = lerp( ( _WIND_GUST_STRENGTH_MICRO851_g26503 - 1.0 ) , temp_output_3_0_g26516 , saturate( ( 1.0 + clampResult13_g26516 ) ));
    float lerpResult1_g26517 = lerp( temp_output_3_0_g26516 , _WIND_GUST_STRENGTH_MICRO851_g26503 , saturate( clampResult13_g26516 ));
    float3 _GUST_MICRO1020_g26503 = ( worldToObjDir1006_g26503 * (( clampResult13_g26516 < 0.0 ) ? lerpResult1_g26522 :  lerpResult1_g26517 ) );
    float3 lerpResult538_g26503 = lerp( temp_output_684_0_g26503 , ( temp_output_684_0_g26503 + ( ( _GUST1018_g26503 + _GUST_MID1019_g26503 + _GUST_MICRO1020_g26503 ) * _WIND_TERTIARY_ROLL669_g26503 ) ) , WIND_GUST_AUDIO_STRENGTH1242_g26354);
    float3 MOTION_LEAF1343_g26354 = lerpResult538_g26503;
    float3 temp_output_19_0_g26450 = MOTION_LEAF1343_g26354;
    float3 temp_output_20_0_g26450 = float3(0,0,0);
    float4 break360_g25922 = v.ase_texcoord4;
    float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
    float3 temp_output_356_0_g25922 = ( ase_worldPos - (_WorldSpaceCameraPos).xyz );
    float3 normalizeResult358_g25922 = normalize( temp_output_356_0_g25922 );
    float3 cam_pos_axis_z384_g25922 = normalizeResult358_g25922;
    float3 normalizeResult366_g25922 = normalize( cross( float3(0,1,0) , cam_pos_axis_z384_g25922 ) );
    float3 cam_pos_axis_x385_g25922 = normalizeResult366_g25922;
    float4x4 break375_g25922 = UNITY_MATRIX_V;
    float3 appendResult377_g25922 = (float3(break375_g25922[ 0 ][ 0 ] , break375_g25922[ 0 ][ 1 ] , break375_g25922[ 0 ][ 2 ]));
    float3 cam_rot_axis_x378_g25922 = appendResult377_g25922;
    float dotResult436_g25922 = dot( float3(0,1,0) , temp_output_356_0_g25922 );
    float temp_output_438_0_g25922 = saturate( abs( dotResult436_g25922 ) );
    float3 lerpResult424_g25922 = lerp( cam_pos_axis_x385_g25922 , cam_rot_axis_x378_g25922 , temp_output_438_0_g25922);
    float3 xAxis346_g25922 = lerpResult424_g25922;
    float3 cam_pos_axis_y383_g25922 = cross( cam_pos_axis_z384_g25922 , normalizeResult366_g25922 );
    float3 appendResult381_g25922 = (float3(break375_g25922[ 1 ][ 0 ] , break375_g25922[ 1 ][ 1 ] , break375_g25922[ 1 ][ 2 ]));
    float3 cam_rot_axis_y379_g25922 = appendResult381_g25922;
    float3 lerpResult423_g25922 = lerp( cam_pos_axis_y383_g25922 , cam_rot_axis_y379_g25922 , temp_output_438_0_g25922);
    float3 yAxis362_g25922 = lerpResult423_g25922;
    float isBillboard343_g25922 = (( break360_g25922.w < -0.99999 ) ? 1.0 :  0.0 );
    float3 temp_output_41_0_g25934 = ( ( ( WIND_TRUNK_STRENGTH1235_g26354 * MOTION_TRUNK1337_g26354 ) + ( WIND_BRANCH_STRENGTH1224_g26354 * MOTION_BRANCH1339_g26354 ) + ( WIND_LEAF_STRENGTH1179_g26354 * (( temp_output_17_0_g26450 == temp_output_18_0_g26450 ) ? temp_output_19_0_g26450 :  temp_output_20_0_g26450 ) ) ) + ( -( ( break360_g25922.x * xAxis346_g25922 ) + ( break360_g25922.y * yAxis362_g25922 ) ) * isBillboard343_g25922 * -1.0 ) );
    float temp_output_63_0_g25935 = (( unity_LODFade.x >= 1E-06 && unity_LODFade.x <= 0.999999 ) ? unity_LODFade.x :  1.0 );
    float3 lerpResult57_g25935 = lerp( temp_output_41_0_g25934 , -ase_vertex3Pos , ( 1.0 - temp_output_63_0_g25935 ));
    #ifdef INTERNAL_LODFADE_SCALE
        float3 staticSwitch58_g25934 = lerpResult57_g25935;
    #else
        float3 staticSwitch58_g25934 = temp_output_41_0_g25934;
    #endif
    #ifdef LOD_FADE_CROSSFADE
        float3 staticSwitch62_g25934 = staticSwitch58_g25934;
    #else
        float3 staticSwitch62_g25934 = temp_output_41_0_g25934;
    #endif
    v.vertex.xyz += staticSwitch62_g25934;
    float3 appendResult382_g25922 = (float3(break375_g25922[ 2 ][ 0 ] , break375_g25922[ 2 ][ 1 ] , break375_g25922[ 2 ][ 2 ]));
    float3 cam_rot_axis_z380_g25922 = appendResult382_g25922;
    float3 lerpResult422_g25922 = lerp( cam_pos_axis_z384_g25922 , cam_rot_axis_z380_g25922 , temp_output_438_0_g25922);
    float3 zAxis421_g25922 = lerpResult422_g25922;
    float3 lerpResult331_g25922 = lerp( ase_vertexNormal , ( -1.0 * zAxis421_g25922 ) , isBillboard343_g25922);
    float3 normalizeResult326_g25922 = normalize( lerpResult331_g25922 );
    v.normal = normalizeResult326_g25922;
    float4 ase_vertexTangent = v.tangent;
    float4 appendResult345_g25922 = (float4(xAxis346_g25922 , -1.0));
    float4 lerpResult341_g25922 = lerp( float4( ase_vertexTangent.xyz , 0.0 ) , appendResult345_g25922 , isBillboard343_g25922);
    v.tangent = lerpResult341_g25922;
}
		
void vertexDataFunc_bark( inout appdata_full_custom v )
{
    float WIND_TRUNK_STRENGTH1235_g23919 = _WIND_TRUNK_STRENGTH;
    half localunity_ObjectToWorld0w1_g24038 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g24038 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g24038 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g24038 = (float3(localunity_ObjectToWorld0w1_g24038 , localunity_ObjectToWorld1w2_g24038 , localunity_ObjectToWorld2w3_g24038));
    float3 WIND_POSITION_OBJECT1195_g23919 = appendResult6_g24038;
    float2 temp_output_1_0_g23978 = (WIND_POSITION_OBJECT1195_g23919).xz;
    float WIND_BASE_TRUNK_FIELD_SIZE1238_g23919 = _WIND_BASE_TRUNK_FIELD_SIZE;
    float temp_output_2_0_g23984 = WIND_BASE_TRUNK_FIELD_SIZE1238_g23919;
    float2 temp_cast_0 = (( 1.0 / (( temp_output_2_0_g23984 == 0.0 ) ? 1.0 :  temp_output_2_0_g23984 ) )).xx;
    float2 temp_output_2_0_g23978 = temp_cast_0;
    float2 temp_output_704_0_g23971 = ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g23978 / temp_output_2_0_g23978 ) :  ( temp_output_1_0_g23978 * temp_output_2_0_g23978 ) ) + float2( 0,0 ) );
    float temp_output_2_0_g23994 = _WIND_BASE_TRUNK_CYCLE_TIME;
    float WIND_BASE_TRUNK_FREQUENCY1237_g23919 = ( 1.0 / (( temp_output_2_0_g23994 == 0.0 ) ? 1.0 :  temp_output_2_0_g23994 ) );
    float2 temp_output_721_0_g23971 = (WIND_BASE_TRUNK_FREQUENCY1237_g23919).xx;
    float2 break298_g23980 = ( temp_output_704_0_g23971 + ( temp_output_721_0_g23971 * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g23980 = (float2(sin( break298_g23980.x ) , cos( break298_g23980.y )));
    float4 temp_output_273_0_g23980 = (-1.0).xxxx;
    float4 temp_output_271_0_g23980 = (1.0).xxxx;
    float2 clampResult26_g23980 = clamp( appendResult299_g23980 , temp_output_273_0_g23980.xy , temp_output_271_0_g23980.xy );
    float WIND_BASE_AMPLITUDE1197_g23919 = _WIND_BASE_AMPLITUDE;
    float WIND_BASE_TRUNK_STRENGTH1236_g23919 = _WIND_BASE_TRUNK_STRENGTH;
    float2 temp_output_720_0_g23971 = (( WIND_BASE_AMPLITUDE1197_g23919 * WIND_BASE_TRUNK_STRENGTH1236_g23919 )).xx;
    float2 TRUNK_PIVOT_ROCKING701_g23971 = ( clampResult26_g23980 * temp_output_720_0_g23971 );
    float WIND_PRIMARY_ROLL1202_g23919 = v.color.r;
    float _WIND_PRIMARY_ROLL669_g23971 = WIND_PRIMARY_ROLL1202_g23919;
    float temp_output_54_0_g23979 = ( TRUNK_PIVOT_ROCKING701_g23971 * 0.05 * _WIND_PRIMARY_ROLL669_g23971 ).x;
    float temp_output_72_0_g23979 = cos( temp_output_54_0_g23979 );
    float one_minus_c52_g23979 = ( 1.0 - temp_output_72_0_g23979 );
    float3 break70_g23979 = float3(0,1,0);
    float axis_x25_g23979 = break70_g23979.x;
    float c66_g23979 = temp_output_72_0_g23979;
    float axis_y37_g23979 = break70_g23979.y;
    float axis_z29_g23979 = break70_g23979.z;
    float s67_g23979 = sin( temp_output_54_0_g23979 );
    float3 appendResult83_g23979 = (float3(( ( one_minus_c52_g23979 * axis_x25_g23979 * axis_x25_g23979 ) + c66_g23979 ) , ( ( one_minus_c52_g23979 * axis_x25_g23979 * axis_y37_g23979 ) - ( axis_z29_g23979 * s67_g23979 ) ) , ( ( one_minus_c52_g23979 * axis_z29_g23979 * axis_x25_g23979 ) + ( axis_y37_g23979 * s67_g23979 ) )));
    float3 appendResult81_g23979 = (float3(( ( one_minus_c52_g23979 * axis_x25_g23979 * axis_y37_g23979 ) + ( axis_z29_g23979 * s67_g23979 ) ) , ( ( one_minus_c52_g23979 * axis_y37_g23979 * axis_y37_g23979 ) + c66_g23979 ) , ( ( one_minus_c52_g23979 * axis_y37_g23979 * axis_z29_g23979 ) - ( axis_x25_g23979 * s67_g23979 ) )));
    float3 appendResult82_g23979 = (float3(( ( one_minus_c52_g23979 * axis_z29_g23979 * axis_x25_g23979 ) - ( axis_y37_g23979 * s67_g23979 ) ) , ( ( one_minus_c52_g23979 * axis_y37_g23979 * axis_z29_g23979 ) + ( axis_x25_g23979 * s67_g23979 ) ) , ( ( one_minus_c52_g23979 * axis_z29_g23979 * axis_z29_g23979 ) + c66_g23979 )));
    float3 ase_vertex3Pos = v.vertex.xyz;
    float3 WIND_PRIMARY_PIVOT1203_g23919 = (v.texcoord1).xyz;
    float3 _WIND_PRIMARY_PIVOT655_g23971 = WIND_PRIMARY_PIVOT1203_g23919;
    float3 temp_output_38_0_g23979 = ( ase_vertex3Pos - (_WIND_PRIMARY_PIVOT655_g23971).xyz );
    float2 break298_g23974 = ( temp_output_704_0_g23971 + ( temp_output_721_0_g23971 * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g23974 = (float2(sin( break298_g23974.x ) , cos( break298_g23974.y )));
    float4 temp_output_273_0_g23974 = (-1.0).xxxx;
    float4 temp_output_271_0_g23974 = (1.0).xxxx;
    float2 clampResult26_g23974 = clamp( appendResult299_g23974 , temp_output_273_0_g23974.xy , temp_output_271_0_g23974.xy );
    float2 TRUNK_SWIRL700_g23971 = ( clampResult26_g23974 * temp_output_720_0_g23971 );
    float2 break699_g23971 = TRUNK_SWIRL700_g23971;
    float3 appendResult698_g23971 = (float3(break699_g23971.x , 0.0 , break699_g23971.y));
    float3 temp_output_694_0_g23971 = ( ( mul( float3x3(appendResult83_g23979, appendResult81_g23979, appendResult82_g23979), temp_output_38_0_g23979 ) - temp_output_38_0_g23979 ) + ( _WIND_PRIMARY_ROLL669_g23971 * appendResult698_g23971 * 0.5 ) );
    float lerpResult632_g23988 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_STRENGTH1242_g23919 = lerpResult632_g23988;
    float temp_output_15_0_g24056 = WIND_GUST_AUDIO_STRENGTH1242_g23919;
    float lerpResult635_g23988 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_LOW , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_LOW1246_g23919 = lerpResult635_g23988;
    float temp_output_16_0_g24056 = WIND_GUST_AUDIO_LOW1246_g23919;
    float WIND_GUST_TRUNK_STRENGTH1240_g23919 = _WIND_GUST_TRUNK_STRENGTH;
    float4 color658_g23947 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_TRUNK_CYCLE_TIME1241_g23919 = _WIND_GUST_TRUNK_CYCLE_TIME;
    float temp_output_2_0_g23948 = WIND_GUST_TRUNK_CYCLE_TIME1241_g23919;
    float2 temp_cast_6 = (( 1.0 / (( temp_output_2_0_g23948 == 0.0 ) ? 1.0 :  temp_output_2_0_g23948 ) )).xx;
    float2 temp_output_61_0_g23957 = float2( 0,0 );
    float2 temp_output_1_0_g23958 = (WIND_POSITION_OBJECT1195_g23919).xz;
    float WIND_GUST_TRUNK_FIELD_SIZE1239_g23919 = _WIND_GUST_TRUNK_FIELD_SIZE;
    float temp_output_2_0_g23953 = WIND_GUST_TRUNK_FIELD_SIZE1239_g23919;
    float temp_output_40_0_g23957 = ( 1.0 / (( temp_output_2_0_g23953 == 0.0 ) ? 1.0 :  temp_output_2_0_g23953 ) );
    float2 temp_cast_7 = (temp_output_40_0_g23957).xx;
    float2 temp_output_2_0_g23958 = temp_cast_7;
    float2 panner90_g23957 = ( _Time.y * temp_cast_6 + ( (( temp_output_61_0_g23957 > float2( 0,0 ) ) ? ( temp_output_1_0_g23958 / temp_output_2_0_g23958 ) :  ( temp_output_1_0_g23958 * temp_output_2_0_g23958 ) ) + temp_output_61_0_g23957 ));
    float temp_output_679_0_g23947 = 1.0;
    float4 temp_cast_8 = (temp_output_679_0_g23947).xxxx;
    float4 temp_output_52_0_g23957 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g23957, 0, 0.0) ) , temp_cast_8 ) );
    float4 lerpResult656_g23947 = lerp( color658_g23947 , temp_output_52_0_g23957 , temp_output_679_0_g23947);
    float4 break655_g23947 = lerpResult656_g23947;
    float4 _Vector0 = float4(0,0,0,0);
    float4 _Vector1 = float4(1,1,1,1);
    float _TRUNK1350_g23919 = ( ( ( temp_output_15_0_g24056 + temp_output_16_0_g24056 ) / 2.0 ) * WIND_GUST_TRUNK_STRENGTH1240_g23919 * (-0.45 + (( 1.0 - break655_g23947.b ) - _Vector0.x) * (1.0 - -0.45) / (_Vector1.x - _Vector0.x)) );
    float _WIND_GUST_STRENGTH703_g23971 = _TRUNK1350_g23919;
    float WIND_PRIMARY_BEND1204_g23919 = v.texcoord1.w;
    float _WIND_PRIMARY_BEND662_g23971 = WIND_PRIMARY_BEND1204_g23919;
    float temp_output_54_0_g23972 = ( ( _WIND_GUST_STRENGTH703_g23971 * -1.0 ) * _WIND_PRIMARY_BEND662_g23971 );
    float temp_output_72_0_g23972 = cos( temp_output_54_0_g23972 );
    float one_minus_c52_g23972 = ( 1.0 - temp_output_72_0_g23972 );
    float3 WIND_DIRECTION1192_g23919 = _WIND_DIRECTION;
    float3 _WIND_DIRECTION671_g23971 = WIND_DIRECTION1192_g23919;
    float3 worldToObjDir719_g23971 = mul( unity_WorldToObject, float4( cross( _WIND_DIRECTION671_g23971 , float3(0,1,0) ), 0 ) ).xyz;
    float3 break70_g23972 = worldToObjDir719_g23971;
    float axis_x25_g23972 = break70_g23972.x;
    float c66_g23972 = temp_output_72_0_g23972;
    float axis_y37_g23972 = break70_g23972.y;
    float axis_z29_g23972 = break70_g23972.z;
    float s67_g23972 = sin( temp_output_54_0_g23972 );
    float3 appendResult83_g23972 = (float3(( ( one_minus_c52_g23972 * axis_x25_g23972 * axis_x25_g23972 ) + c66_g23972 ) , ( ( one_minus_c52_g23972 * axis_x25_g23972 * axis_y37_g23972 ) - ( axis_z29_g23972 * s67_g23972 ) ) , ( ( one_minus_c52_g23972 * axis_z29_g23972 * axis_x25_g23972 ) + ( axis_y37_g23972 * s67_g23972 ) )));
    float3 appendResult81_g23972 = (float3(( ( one_minus_c52_g23972 * axis_x25_g23972 * axis_y37_g23972 ) + ( axis_z29_g23972 * s67_g23972 ) ) , ( ( one_minus_c52_g23972 * axis_y37_g23972 * axis_y37_g23972 ) + c66_g23972 ) , ( ( one_minus_c52_g23972 * axis_y37_g23972 * axis_z29_g23972 ) - ( axis_x25_g23972 * s67_g23972 ) )));
    float3 appendResult82_g23972 = (float3(( ( one_minus_c52_g23972 * axis_z29_g23972 * axis_x25_g23972 ) - ( axis_y37_g23972 * s67_g23972 ) ) , ( ( one_minus_c52_g23972 * axis_y37_g23972 * axis_z29_g23972 ) + ( axis_x25_g23972 * s67_g23972 ) ) , ( ( one_minus_c52_g23972 * axis_z29_g23972 * axis_z29_g23972 ) + c66_g23972 )));
    float3 temp_output_38_0_g23972 = ( ase_vertex3Pos - (_WIND_PRIMARY_PIVOT655_g23971).xyz );
    float3 lerpResult538_g23971 = lerp( temp_output_694_0_g23971 , ( temp_output_694_0_g23971 + ( mul( float3x3(appendResult83_g23972, appendResult81_g23972, appendResult82_g23972), temp_output_38_0_g23972 ) - temp_output_38_0_g23972 ) ) , WIND_GUST_AUDIO_STRENGTH1242_g23919);
    float3 MOTION_TRUNK1337_g23919 = lerpResult538_g23971;
    float WIND_BRANCH_STRENGTH1224_g23919 = _WIND_BRANCH_STRENGTH;
    float3 _WIND_POSITION_ROOT1002_g24088 = WIND_POSITION_OBJECT1195_g23919;
    float2 temp_output_1_0_g24111 = (_WIND_POSITION_ROOT1002_g24088).xz;
    float WIND_BASE_BRANCH_FIELD_SIZE1218_g23919 = _WIND_BASE_BRANCH_FIELD_SIZE;
    float _WIND_BASE_BRANCH_FIELD_SIZE1004_g24088 = WIND_BASE_BRANCH_FIELD_SIZE1218_g23919;
    float temp_output_2_0_g24118 = _WIND_BASE_BRANCH_FIELD_SIZE1004_g24088;
    float2 temp_cast_11 = (( 1.0 / (( temp_output_2_0_g24118 == 0.0 ) ? 1.0 :  temp_output_2_0_g24118 ) )).xx;
    float2 temp_output_2_0_g24111 = temp_cast_11;
    float temp_output_587_552_g24022 = v.color.a;
    float WIND_PHASE1212_g23919 = temp_output_587_552_g24022;
    float _WIND_PHASE852_g24088 = WIND_PHASE1212_g23919;
    float WIND_BASE_BRANCH_VARIATION_STRENGTH1219_g23919 = _WIND_BASE_BRANCH_VARIATION_STRENGTH;
    float _WIND_BASE_BRANCH_VARIATION_STRENGTH1006_g24088 = WIND_BASE_BRANCH_VARIATION_STRENGTH1219_g23919;
    float2 temp_cast_12 = (( ( _WIND_PHASE852_g24088 * _WIND_BASE_BRANCH_VARIATION_STRENGTH1006_g24088 ) * UNITY_PI )).xx;
    float temp_output_2_0_g24059 = _WIND_BASE_BRANCH_CYCLE_TIME;
    float WIND_BASE_BRANCH_FREQUENCY1217_g23919 = ( 1.0 / (( temp_output_2_0_g24059 == 0.0 ) ? 1.0 :  temp_output_2_0_g24059 ) );
    float2 break298_g24107 = ( ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g24111 / temp_output_2_0_g24111 ) :  ( temp_output_1_0_g24111 * temp_output_2_0_g24111 ) ) + temp_cast_12 ) + ( (( WIND_BASE_BRANCH_FREQUENCY1217_g23919 * _WIND_PHASE852_g24088 )).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g24107 = (float2(sin( break298_g24107.x ) , cos( break298_g24107.y )));
    float4 temp_output_273_0_g24107 = (-1.0).xxxx;
    float4 temp_output_271_0_g24107 = (1.0).xxxx;
    float2 clampResult26_g24107 = clamp( appendResult299_g24107 , temp_output_273_0_g24107.xy , temp_output_271_0_g24107.xy );
    float WIND_BASE_BRANCH_STRENGTH1227_g23919 = _WIND_BASE_BRANCH_STRENGTH;
    float2 BRANCH_SWIRL931_g24088 = ( clampResult26_g24107 * (( WIND_BASE_AMPLITUDE1197_g23919 * WIND_BASE_BRANCH_STRENGTH1227_g23919 )).xx );
    float2 break932_g24088 = BRANCH_SWIRL931_g24088;
    float3 appendResult933_g24088 = (float3(break932_g24088.x , 0.0 , break932_g24088.y));
    float WIND_SECONDARY_ROLL1205_g23919 = v.color.g;
    float _WIND_SECONDARY_ROLL650_g24088 = WIND_SECONDARY_ROLL1205_g23919;
    float3 VALUE_ROLL1034_g24088 = ( appendResult933_g24088 * _WIND_SECONDARY_ROLL650_g24088 * 0.5 );
    float3 _WIND_DIRECTION856_g24088 = WIND_DIRECTION1192_g23919;
    float3 WIND_SECONDARY_GROWTH_DIRECTION1208_g23919 = (v.texcoord2).xyz;
    float3 temp_output_839_0_g24088 = WIND_SECONDARY_GROWTH_DIRECTION1208_g23919;
    float3 _WIND_SECONDARY_GROWTH_DIRECTION = float3(0,1,0);
    float3 objToWorldDir1174_g24088 = mul( unity_ObjectToWorld, float4( (( length( temp_output_839_0_g24088 ) == 0.0 ) ? _WIND_SECONDARY_GROWTH_DIRECTION :  temp_output_839_0_g24088 ), 0 ) ).xyz;
    float3 _WIND_SECONDARY_GROWTH_DIRECTION840_g24088 = (objToWorldDir1174_g24088).xyz;
    float dotResult565_g24088 = dot( _WIND_DIRECTION856_g24088 , _WIND_SECONDARY_GROWTH_DIRECTION840_g24088 );
    float clampResult13_g24100 = clamp( dotResult565_g24088 , -1.0 , 1.0 );
    float4 color658_g23935 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_BRANCH_CYCLE_TIME1220_g23919 = _WIND_GUST_BRANCH_CYCLE_TIME;
    float clampResult3_g24031 = clamp( temp_output_587_552_g24022 , 0.0 , 1.0 );
    float WIND_PHASE_UNPACKED1530_g23919 = ( ( clampResult3_g24031 * 2.0 ) - 1.0 );
    float temp_output_2_0_g23936 = ( WIND_GUST_BRANCH_CYCLE_TIME1220_g23919 + ( WIND_GUST_BRANCH_CYCLE_TIME1220_g23919 * WIND_PHASE_UNPACKED1530_g23919 * 0.1 ) );
    float2 temp_cast_15 = (( 1.0 / (( temp_output_2_0_g23936 == 0.0 ) ? 1.0 :  temp_output_2_0_g23936 ) )).xx;
    float2 temp_output_61_0_g23945 = float2( 0,0 );
    float3 WIND_SECONDARY_PIVOT1206_g23919 = (v.texcoord3).xyz;
    float WIND_GUST_BRANCH_VARIATION_STRENGTH1223_g23919 = _WIND_GUST_BRANCH_VARIATION_STRENGTH;
    float2 temp_output_1_0_g23946 = ( (WIND_POSITION_OBJECT1195_g23919).xz + (WIND_SECONDARY_PIVOT1206_g23919).xy + ( WIND_PHASE1212_g23919 * WIND_GUST_BRANCH_VARIATION_STRENGTH1223_g23919 ) );
    float WIND_GUST_BRANCH_FIELD_SIZE1222_g23919 = _WIND_GUST_BRANCH_FIELD_SIZE;
    float temp_output_2_0_g23941 = WIND_GUST_BRANCH_FIELD_SIZE1222_g23919;
    float temp_output_40_0_g23945 = ( 1.0 / (( temp_output_2_0_g23941 == 0.0 ) ? 1.0 :  temp_output_2_0_g23941 ) );
    float2 temp_cast_16 = (temp_output_40_0_g23945).xx;
    float2 temp_output_2_0_g23946 = temp_cast_16;
    float2 panner90_g23945 = ( _Time.y * temp_cast_15 + ( (( temp_output_61_0_g23945 > float2( 0,0 ) ) ? ( temp_output_1_0_g23946 / temp_output_2_0_g23946 ) :  ( temp_output_1_0_g23946 * temp_output_2_0_g23946 ) ) + temp_output_61_0_g23945 ));
    float temp_output_679_0_g23935 = 1.0;
    float4 temp_cast_17 = (temp_output_679_0_g23935).xxxx;
    float4 temp_output_52_0_g23945 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g23945, 0, 0.0) ) , temp_cast_17 ) );
    float4 lerpResult656_g23935 = lerp( color658_g23935 , temp_output_52_0_g23945 , temp_output_679_0_g23935);
    float4 break655_g23935 = lerpResult656_g23935;
    float temp_output_15_0_g24036 = break655_g23935.r;
    float temp_output_16_0_g24036 = ( 1.0 - break655_g23935.b );
    float temp_output_15_0_g24067 = WIND_GUST_AUDIO_STRENGTH1242_g23919;
    float lerpResult634_g23988 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_MID , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_MID1245_g23919 = lerpResult634_g23988;
    float temp_output_16_0_g24067 = WIND_GUST_AUDIO_MID1245_g23919;
    float temp_output_1516_14_g23919 = ( ( temp_output_15_0_g24067 + temp_output_16_0_g24067 ) / 2.0 );
    float WIND_GUST_BRANCH_STRENGTH1229_g23919 = _WIND_GUST_BRANCH_STRENGTH;
    float WIND_GUST_BRANCH_STRENGTH_OPPOSITE1573_g23919 = _WIND_GUST_BRANCH_STRENGTH_OPPOSITE;
    float _BRANCH_OPPOSITE_DOWN1466_g23919 = ( (-0.1 + (( ( temp_output_15_0_g24036 + temp_output_16_0_g24036 ) / 2.0 ) - _Vector0.x) * (0.75 - -0.1) / (_Vector1.x - _Vector0.x)) * temp_output_1516_14_g23919 * WIND_GUST_BRANCH_STRENGTH1229_g23919 * WIND_GUST_BRANCH_STRENGTH_OPPOSITE1573_g23919 );
    float _GUST_STRENGTH_OPPOSITE_DOWN1188_g24088 = _BRANCH_OPPOSITE_DOWN1466_g23919;
    float temp_output_15_0_g24019 = ( 1.0 - break655_g23935.g );
    float temp_output_16_0_g24019 = break655_g23935.a;
    float _BRANCH_OPPOSITE_UP1348_g23919 = ( (-0.3 + (( ( temp_output_15_0_g24019 + temp_output_16_0_g24019 ) / 2.0 ) - _Vector0.x) * (1.0 - -0.3) / (_Vector1.x - _Vector0.x)) * temp_output_1516_14_g23919 * WIND_GUST_BRANCH_STRENGTH1229_g23919 * WIND_GUST_BRANCH_STRENGTH_OPPOSITE1573_g23919 );
    float _GUST_STRENGTH_OPPOSITE_UP871_g24088 = _BRANCH_OPPOSITE_UP1348_g23919;
    float dotResult1180_g24088 = dot( _WIND_SECONDARY_GROWTH_DIRECTION840_g24088 , float3(0,1,0) );
    float clampResult8_g24112 = clamp( dotResult1180_g24088 , -1.0 , 1.0 );
    float _WIND_SECONDARY_VERTICALITY843_g24088 = ( ( clampResult8_g24112 * 0.5 ) + 0.5 );
    float temp_output_2_0_g24114 = _WIND_SECONDARY_VERTICALITY843_g24088;
    float temp_output_3_0_g24114 = 0.5;
    float temp_output_21_0_g24114 = 1.0;
    float temp_output_26_0_g24114 = 0.0;
    float lerpResult1_g24123 = lerp( _GUST_STRENGTH_OPPOSITE_DOWN1188_g24088 , ( _GUST_STRENGTH_OPPOSITE_UP871_g24088 * -1.0 ) , saturate( saturate( (( temp_output_2_0_g24114 >= temp_output_3_0_g24114 ) ? temp_output_21_0_g24114 :  temp_output_26_0_g24114 ) ) ));
    float WIND_SECONDARY_BEND1207_g23919 = v.texcoord3.w;
    float _WIND_SECONDARY_BEND849_g24088 = WIND_SECONDARY_BEND1207_g23919;
    float clampResult1170_g24088 = clamp( _WIND_SECONDARY_BEND849_g24088 , 0.0 , 0.75 );
    float clampResult1175_g24088 = clamp( ( lerpResult1_g24123 * clampResult1170_g24088 ) , -1.5 , 1.5 );
    float temp_output_54_0_g24094 = clampResult1175_g24088;
    float temp_output_72_0_g24094 = cos( temp_output_54_0_g24094 );
    float one_minus_c52_g24094 = ( 1.0 - temp_output_72_0_g24094 );
    float3 worldToObjDir1173_g24088 = mul( unity_WorldToObject, float4( cross( _WIND_DIRECTION856_g24088 , float3(0,1,0) ), 0 ) ).xyz;
    float3 break70_g24094 = worldToObjDir1173_g24088;
    float axis_x25_g24094 = break70_g24094.x;
    float c66_g24094 = temp_output_72_0_g24094;
    float axis_y37_g24094 = break70_g24094.y;
    float axis_z29_g24094 = break70_g24094.z;
    float s67_g24094 = sin( temp_output_54_0_g24094 );
    float3 appendResult83_g24094 = (float3(( ( one_minus_c52_g24094 * axis_x25_g24094 * axis_x25_g24094 ) + c66_g24094 ) , ( ( one_minus_c52_g24094 * axis_x25_g24094 * axis_y37_g24094 ) - ( axis_z29_g24094 * s67_g24094 ) ) , ( ( one_minus_c52_g24094 * axis_z29_g24094 * axis_x25_g24094 ) + ( axis_y37_g24094 * s67_g24094 ) )));
    float3 appendResult81_g24094 = (float3(( ( one_minus_c52_g24094 * axis_x25_g24094 * axis_y37_g24094 ) + ( axis_z29_g24094 * s67_g24094 ) ) , ( ( one_minus_c52_g24094 * axis_y37_g24094 * axis_y37_g24094 ) + c66_g24094 ) , ( ( one_minus_c52_g24094 * axis_y37_g24094 * axis_z29_g24094 ) - ( axis_x25_g24094 * s67_g24094 ) )));
    float3 appendResult82_g24094 = (float3(( ( one_minus_c52_g24094 * axis_z29_g24094 * axis_x25_g24094 ) - ( axis_y37_g24094 * s67_g24094 ) ) , ( ( one_minus_c52_g24094 * axis_y37_g24094 * axis_z29_g24094 ) + ( axis_x25_g24094 * s67_g24094 ) ) , ( ( one_minus_c52_g24094 * axis_z29_g24094 * axis_z29_g24094 ) + c66_g24094 )));
    float3 _WIND_SECONDARY_PIVOT846_g24088 = WIND_SECONDARY_PIVOT1206_g23919;
    float3 temp_output_38_0_g24094 = ( ase_vertex3Pos - (_WIND_SECONDARY_PIVOT846_g24088).xyz );
    float3 VALUE_FACING_WIND1042_g24088 = ( mul( float3x3(appendResult83_g24094, appendResult81_g24094, appendResult82_g24094), temp_output_38_0_g24094 ) - temp_output_38_0_g24094 );
    float2 temp_output_1_0_g24089 = (_WIND_SECONDARY_PIVOT846_g24088).xz;
    float _WIND_GUST_BRANCH_FIELD_SIZE1011_g24088 = WIND_GUST_BRANCH_FIELD_SIZE1222_g23919;
    float temp_output_2_0_g24096 = _WIND_GUST_BRANCH_FIELD_SIZE1011_g24088;
    float2 temp_cast_22 = (( 1.0 / (( temp_output_2_0_g24096 == 0.0 ) ? 1.0 :  temp_output_2_0_g24096 ) )).xx;
    float2 temp_output_2_0_g24089 = temp_cast_22;
    float _WIND_GUST_BRANCH_VARIATION_STRENGTH1008_g24088 = WIND_GUST_BRANCH_VARIATION_STRENGTH1223_g23919;
    float2 temp_cast_23 = (( ( _WIND_PHASE852_g24088 * _WIND_GUST_BRANCH_VARIATION_STRENGTH1008_g24088 ) * UNITY_PI )).xx;
    float temp_output_2_0_g24063 = _WIND_GUST_BRANCH_CYCLE_TIME;
    float WIND_GUST_BRANCH_FREQUENCY1221_g23919 = ( 1.0 / (( temp_output_2_0_g24063 == 0.0 ) ? 1.0 :  temp_output_2_0_g24063 ) );
    float _WIND_GUST_BRANCH_FREQUENCY1012_g24088 = WIND_GUST_BRANCH_FREQUENCY1221_g23919;
    float2 break298_g24090 = ( ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g24089 / temp_output_2_0_g24089 ) :  ( temp_output_1_0_g24089 * temp_output_2_0_g24089 ) ) + temp_cast_23 ) + ( (_WIND_GUST_BRANCH_FREQUENCY1012_g24088).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g24090 = (float2(sin( break298_g24090.x ) , cos( break298_g24090.y )));
    float4 temp_output_273_0_g24090 = (-1.0).xxxx;
    float4 temp_output_271_0_g24090 = (1.0).xxxx;
    float2 clampResult26_g24090 = clamp( appendResult299_g24090 , temp_output_273_0_g24090.xy , temp_output_271_0_g24090.xy );
    float2 break305_g24090 = float2( -0.25,1 );
    float temp_output_15_0_g24035 = ( 1.0 - break655_g23935.r );
    float temp_output_16_0_g24035 = break655_g23935.g;
    float WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR1574_g23919 = _WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR;
    float _BRANCH_PERPENDICULAR1431_g23919 = ( (-0.1 + (( ( temp_output_15_0_g24035 + temp_output_16_0_g24035 ) / 2.0 ) - _Vector0.x) * (0.9 - -0.1) / (_Vector1.x - _Vector0.x)) * temp_output_1516_14_g23919 * WIND_GUST_BRANCH_STRENGTH1229_g23919 * WIND_GUST_BRANCH_STRENGTH_PERPENDICULAR1574_g23919 );
    float _GUST_STRENGTH_PERPENDICULAR999_g24088 = _BRANCH_PERPENDICULAR1431_g23919;
    float2 break1067_g24088 = ( ( ((break305_g24090.x).xxxx.xy + (clampResult26_g24090 - temp_output_273_0_g24090.xy) * ((break305_g24090.y).xxxx.xy - (break305_g24090.x).xxxx.xy) / (temp_output_271_0_g24090.xy - temp_output_273_0_g24090.xy)) * (_GUST_STRENGTH_PERPENDICULAR999_g24088).xx ) * _WIND_SECONDARY_ROLL650_g24088 );
    float3 appendResult1066_g24088 = (float3(break1067_g24088.x , 0.0 , break1067_g24088.y));
    float3 worldToObjDir1089_g24088 = normalize( mul( unity_WorldToObject, float4( _WIND_DIRECTION856_g24088, 0 ) ).xyz );
    float3 BRANCH_SWIRL972_g24088 = ( appendResult1066_g24088 * worldToObjDir1089_g24088 );
    float3 VALUE_PERPENDICULAR1041_g24088 = BRANCH_SWIRL972_g24088;
    float3 temp_output_3_0_g24100 = VALUE_PERPENDICULAR1041_g24088;
    float3 lerpResult1_g24106 = lerp( VALUE_FACING_WIND1042_g24088 , temp_output_3_0_g24100 , saturate( ( 1.0 + clampResult13_g24100 ) ));
    float temp_output_15_0_g23922 = break655_g23935.b;
    float temp_output_16_0_g23922 = ( 1.0 - break655_g23935.a );
    float clampResult3_g24020 = clamp( ( ( temp_output_15_0_g23922 + temp_output_16_0_g23922 ) / 2.0 ) , 0.0 , 1.0 );
    float WIND_GUST_BRANCH_STRENGTH_PARALLEL1575_g23919 = _WIND_GUST_BRANCH_STRENGTH_PARALLEL;
    float _BRANCH_PARALLEL1432_g23919 = ( ( ( clampResult3_g24020 * 2.0 ) - 1.0 ) * temp_output_1516_14_g23919 * WIND_GUST_BRANCH_STRENGTH1229_g23919 * WIND_GUST_BRANCH_STRENGTH_PARALLEL1575_g23919 );
    float _GUST_STRENGTH_PARALLEL1110_g24088 = _BRANCH_PARALLEL1432_g23919;
    float clampResult1167_g24088 = clamp( ( _GUST_STRENGTH_PARALLEL1110_g24088 * _WIND_SECONDARY_BEND849_g24088 ) , -1.5 , 1.5 );
    float temp_output_54_0_g24095 = clampResult1167_g24088;
    float temp_output_72_0_g24095 = cos( temp_output_54_0_g24095 );
    float one_minus_c52_g24095 = ( 1.0 - temp_output_72_0_g24095 );
    float3 break70_g24095 = float3(0,1,0);
    float axis_x25_g24095 = break70_g24095.x;
    float c66_g24095 = temp_output_72_0_g24095;
    float axis_y37_g24095 = break70_g24095.y;
    float axis_z29_g24095 = break70_g24095.z;
    float s67_g24095 = sin( temp_output_54_0_g24095 );
    float3 appendResult83_g24095 = (float3(( ( one_minus_c52_g24095 * axis_x25_g24095 * axis_x25_g24095 ) + c66_g24095 ) , ( ( one_minus_c52_g24095 * axis_x25_g24095 * axis_y37_g24095 ) - ( axis_z29_g24095 * s67_g24095 ) ) , ( ( one_minus_c52_g24095 * axis_z29_g24095 * axis_x25_g24095 ) + ( axis_y37_g24095 * s67_g24095 ) )));
    float3 appendResult81_g24095 = (float3(( ( one_minus_c52_g24095 * axis_x25_g24095 * axis_y37_g24095 ) + ( axis_z29_g24095 * s67_g24095 ) ) , ( ( one_minus_c52_g24095 * axis_y37_g24095 * axis_y37_g24095 ) + c66_g24095 ) , ( ( one_minus_c52_g24095 * axis_y37_g24095 * axis_z29_g24095 ) - ( axis_x25_g24095 * s67_g24095 ) )));
    float3 appendResult82_g24095 = (float3(( ( one_minus_c52_g24095 * axis_z29_g24095 * axis_x25_g24095 ) - ( axis_y37_g24095 * s67_g24095 ) ) , ( ( one_minus_c52_g24095 * axis_y37_g24095 * axis_z29_g24095 ) + ( axis_x25_g24095 * s67_g24095 ) ) , ( ( one_minus_c52_g24095 * axis_z29_g24095 * axis_z29_g24095 ) + c66_g24095 )));
    float3 temp_output_38_0_g24095 = ( ase_vertex3Pos - (_WIND_SECONDARY_PIVOT846_g24088).xyz );
    float3 VALUE_AWAY_FROM_WIND1040_g24088 = ( mul( float3x3(appendResult83_g24095, appendResult81_g24095, appendResult82_g24095), temp_output_38_0_g24095 ) - temp_output_38_0_g24095 );
    float3 lerpResult1_g24101 = lerp( temp_output_3_0_g24100 , VALUE_AWAY_FROM_WIND1040_g24088 , saturate( clampResult13_g24100 ));
    float3 lerpResult631_g24088 = lerp( VALUE_ROLL1034_g24088 , (( clampResult13_g24100 < 0.0 ) ? lerpResult1_g24106 :  lerpResult1_g24101 ) , WIND_GUST_AUDIO_STRENGTH1242_g23919);
    float3 MOTION_BRANCH1339_g23919 = lerpResult631_g24088;
    float WIND_LEAF_STRENGTH1179_g23919 = _WIND_LEAF_STRENGTH;
    float temp_output_17_0_g24015 = 3.0;
    float TYPE_DESIGNATOR1209_g23919 = round( v.texcoord2.w );
    float temp_output_18_0_g24015 = TYPE_DESIGNATOR1209_g23919;
    float WIND_TERTIARY_ROLL1210_g23919 = v.color.b;
    float _WIND_TERTIARY_ROLL669_g24068 = WIND_TERTIARY_ROLL1210_g23919;
    float3 temp_output_615_0_g24037 = ( float3( 0,0,0 ) + ase_vertex3Pos );
    float3 WIND_POSITION_VERTEX_OBJECT1193_g23919 = temp_output_615_0_g24037;
    float2 temp_output_1_0_g24069 = (WIND_POSITION_VERTEX_OBJECT1193_g23919).xz;
    float WIND_BASE_LEAF_FIELD_SIZE1182_g23919 = _WIND_BASE_LEAF_FIELD_SIZE;
    float2 temp_output_2_0_g24069 = (WIND_BASE_LEAF_FIELD_SIZE1182_g23919).xx;
    float _WIND_VARIATION662_g24068 = WIND_PHASE1212_g23919;
    float2 temp_output_704_0_g24068 = ( (( 1.0 > 0.0 ) ? ( temp_output_1_0_g24069 / temp_output_2_0_g24069 ) :  ( temp_output_1_0_g24069 * temp_output_2_0_g24069 ) ) + (_WIND_VARIATION662_g24068).xx );
    float temp_output_2_0_g24044 = _WIND_BASE_LEAF_CYCLE_TIME;
    float WIND_BASE_LEAF_FREQUENCY1264_g23919 = ( 1.0 / (( temp_output_2_0_g24044 == 0.0 ) ? 1.0 :  temp_output_2_0_g24044 ) );
    float temp_output_618_0_g24068 = WIND_BASE_LEAF_FREQUENCY1264_g23919;
    float2 break298_g24070 = ( temp_output_704_0_g24068 + ( (temp_output_618_0_g24068).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g24070 = (float2(sin( break298_g24070.x ) , cos( break298_g24070.y )));
    float4 temp_output_273_0_g24070 = (-1.0).xxxx;
    float4 temp_output_271_0_g24070 = (1.0).xxxx;
    float2 clampResult26_g24070 = clamp( appendResult299_g24070 , temp_output_273_0_g24070.xy , temp_output_271_0_g24070.xy );
    float WIND_BASE_LEAF_STRENGTH1180_g23919 = _WIND_BASE_LEAF_STRENGTH;
    float2 temp_output_1031_0_g24068 = (( WIND_BASE_LEAF_STRENGTH1180_g23919 * WIND_BASE_AMPLITUDE1197_g23919 )).xx;
    float2 break699_g24068 = ( clampResult26_g24070 * temp_output_1031_0_g24068 );
    float2 break298_g24074 = ( temp_output_704_0_g24068 + ( (( 0.71 * temp_output_618_0_g24068 )).xx * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g24074 = (float2(sin( break298_g24074.x ) , cos( break298_g24074.y )));
    float4 temp_output_273_0_g24074 = (-1.0).xxxx;
    float4 temp_output_271_0_g24074 = (1.0).xxxx;
    float2 clampResult26_g24074 = clamp( appendResult299_g24074 , temp_output_273_0_g24074.xy , temp_output_271_0_g24074.xy );
    float3 appendResult698_g24068 = (float3(break699_g24068.x , ( clampResult26_g24074 * temp_output_1031_0_g24068 )));
    float3 temp_output_684_0_g24068 = ( _WIND_TERTIARY_ROLL669_g24068 * appendResult698_g24068 );
    float3 _WIND_DIRECTION671_g24068 = WIND_DIRECTION1192_g23919;
    float3 worldToObjDir1006_g24068 = mul( unity_WorldToObject, float4( _WIND_DIRECTION671_g24068, 0 ) ).xyz;
    float WIND_GUST_LEAF_STRENGTH1183_g23919 = _WIND_GUST_LEAF_STRENGTH;
    float lerpResult638_g23988 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_VERYHIGH , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_VERYHIGH1243_g23919 = lerpResult638_g23988;
    float4 color658_g23998 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float2 temp_output_61_0_g24003 = float2( 0,0 );
    float WIND_VARIATION1211_g23919 = v.texcoord.w;
    half localunity_ObjectToWorld0w1_g23920 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld2w3_g23920 = ( unity_ObjectToWorld[2].w );
    float2 appendResult1374_g23919 = (float2(localunity_ObjectToWorld0w1_g23920 , localunity_ObjectToWorld2w3_g23920));
    float2 temp_output_1_0_g24004 = ( ( 10.0 * WIND_VARIATION1211_g23919 ) + appendResult1374_g23919 );
    float WIND_GUST_LEAF_FIELD_SIZE1185_g23919 = _WIND_GUST_LEAF_FIELD_SIZE;
    float temp_output_2_0_g24010 = WIND_GUST_LEAF_FIELD_SIZE1185_g23919;
    float temp_output_40_0_g24003 = ( 1.0 / (( temp_output_2_0_g24010 == 0.0 ) ? 1.0 :  temp_output_2_0_g24010 ) );
    float2 temp_cast_36 = (temp_output_40_0_g24003).xx;
    float2 temp_output_2_0_g24004 = temp_cast_36;
    float clampResult3_g24016 = clamp( WIND_VARIATION1211_g23919 , 0.0 , 1.0 );
    float WIND_GUST_LEAF_CYCLE_TIME1184_g23919 = _WIND_GUST_LEAF_CYCLE_TIME;
    float temp_output_2_0_g23999 = ( ( ( ( clampResult3_g24016 * 2.0 ) - 1.0 ) * 0.3 * WIND_GUST_LEAF_CYCLE_TIME1184_g23919 ) + WIND_GUST_LEAF_CYCLE_TIME1184_g23919 );
    float mulTime37_g24003 = _Time.y * ( 1.0 / (( temp_output_2_0_g23999 == 0.0 ) ? 1.0 :  temp_output_2_0_g23999 ) );
    float temp_output_220_0_g24006 = -1.0;
    float4 temp_cast_37 = (temp_output_220_0_g24006).xxxx;
    float temp_output_219_0_g24006 = 1.0;
    float4 temp_cast_38 = (temp_output_219_0_g24006).xxxx;
    float4 clampResult26_g24006 = clamp( sin( ( ( tex2Dlod( _WIND_GUST_TEXTURE, float4( ( (( temp_output_61_0_g24003 > float2( 0,0 ) ) ? ( temp_output_1_0_g24004 / temp_output_2_0_g24004 ) :  ( temp_output_1_0_g24004 * temp_output_2_0_g24004 ) ) + temp_output_61_0_g24003 ), 0, 0.0) ) * ( 2.0 * UNITY_PI ) ) + mulTime37_g24003 ) ) , temp_cast_37 , temp_cast_38 );
    float4 temp_cast_39 = (temp_output_220_0_g24006).xxxx;
    float4 temp_cast_40 = (temp_output_219_0_g24006).xxxx;
    float4 temp_cast_41 = (0.0).xxxx;
    float4 temp_cast_42 = (temp_output_219_0_g24006).xxxx;
    float temp_output_679_0_g23998 = 1.0;
    float4 temp_cast_43 = (temp_output_679_0_g23998).xxxx;
    float4 temp_output_52_0_g24003 = saturate( pow( abs( (temp_cast_41 + (clampResult26_g24006 - temp_cast_39) * (temp_cast_42 - temp_cast_41) / (temp_cast_40 - temp_cast_39)) ) , temp_cast_43 ) );
    float4 lerpResult656_g23998 = lerp( color658_g23998 , temp_output_52_0_g24003 , temp_output_679_0_g23998);
    float4 break655_g23998 = lerpResult656_g23998;
    float LEAF_GUST1375_g23919 = ( WIND_GUST_LEAF_STRENGTH1183_g23919 * WIND_GUST_AUDIO_VERYHIGH1243_g23919 * break655_g23998.g );
    float _WIND_GUST_STRENGTH703_g24068 = LEAF_GUST1375_g23919;
    float3 _GUST1018_g24068 = ( worldToObjDir1006_g24068 * _WIND_GUST_STRENGTH703_g24068 );
    float WIND_GUST_LEAF_MID_STRENGTH1186_g23919 = _WIND_GUST_LEAF_MID_STRENGTH;
    float lerpResult633_g23988 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_HIGH , _WIND_AUDIO_INFLUENCE);
    float WIND_GUST_AUDIO_HIGH1244_g23919 = lerpResult633_g23988;
    float4 color658_g23923 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_LEAF_MID_CYCLE_TIME1187_g23919 = _WIND_GUST_LEAF_MID_CYCLE_TIME;
    float temp_output_2_0_g23924 = ( WIND_GUST_LEAF_MID_CYCLE_TIME1187_g23919 + ( WIND_VARIATION1211_g23919 * -0.05 ) );
    float2 temp_cast_44 = (( 1.0 / (( temp_output_2_0_g23924 == 0.0 ) ? 1.0 :  temp_output_2_0_g23924 ) )).xx;
    float2 temp_output_61_0_g23933 = float2( 0,0 );
    float2 appendResult1400_g23919 = (float2(ase_vertex3Pos.x , ase_vertex3Pos.z));
    float2 temp_output_1_0_g23934 = ( (WIND_VARIATION1211_g23919).xx + appendResult1400_g23919 );
    float WIND_GUST_LEAF_MID_FIELD_SIZE1188_g23919 = _WIND_GUST_LEAF_MID_FIELD_SIZE;
    float temp_output_2_0_g23929 = WIND_GUST_LEAF_MID_FIELD_SIZE1188_g23919;
    float temp_output_40_0_g23933 = ( 1.0 / (( temp_output_2_0_g23929 == 0.0 ) ? 1.0 :  temp_output_2_0_g23929 ) );
    float2 temp_cast_45 = (temp_output_40_0_g23933).xx;
    float2 temp_output_2_0_g23934 = temp_cast_45;
    float2 panner90_g23933 = ( _Time.y * temp_cast_44 + ( (( temp_output_61_0_g23933 > float2( 0,0 ) ) ? ( temp_output_1_0_g23934 / temp_output_2_0_g23934 ) :  ( temp_output_1_0_g23934 * temp_output_2_0_g23934 ) ) + temp_output_61_0_g23933 ));
    float temp_output_679_0_g23923 = 1.0;
    float4 temp_cast_46 = (temp_output_679_0_g23923).xxxx;
    float4 temp_output_52_0_g23933 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g23933, 0, 0.0) ) , temp_cast_46 ) );
    float4 lerpResult656_g23923 = lerp( color658_g23923 , temp_output_52_0_g23933 , temp_output_679_0_g23923);
    float4 break655_g23923 = lerpResult656_g23923;
    float temp_output_1557_630_g23919 = break655_g23923.r;
    float LEAF_GUST_MID1397_g23919 = ( WIND_GUST_LEAF_MID_STRENGTH1186_g23919 * WIND_GUST_AUDIO_HIGH1244_g23919 * temp_output_1557_630_g23919 * temp_output_1557_630_g23919 );
    float _WIND_GUST_STRENGTH_MID829_g24068 = LEAF_GUST_MID1397_g23919;
    float3 _GUST_MID1019_g24068 = ( worldToObjDir1006_g24068 * _WIND_GUST_STRENGTH_MID829_g24068 );
    float3 ase_vertexNormal = v.normal.xyz;
    float3 _LEAF_NORMAL992_g24068 = ase_vertexNormal;
    float dotResult1_g24080 = dot( worldToObjDir1006_g24068 , _LEAF_NORMAL992_g24068 );
    float clampResult13_g24081 = clamp( dotResult1_g24080 , -1.0 , 1.0 );
    float WIND_GUST_LEAF_MICRO_STRENGTH1189_g23919 = _WIND_GUST_LEAF_MICRO_STRENGTH;
    float4 color658_g23959 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float WIND_GUST_LEAF_MICRO_CYCLE_TIME1190_g23919 = _WIND_GUST_LEAF_MICRO_CYCLE_TIME;
    float temp_output_2_0_g23960 = ( WIND_GUST_LEAF_MICRO_CYCLE_TIME1190_g23919 + ( WIND_VARIATION1211_g23919 * 0.1 ) );
    float2 temp_cast_47 = (( 1.0 / (( temp_output_2_0_g23960 == 0.0 ) ? 1.0 :  temp_output_2_0_g23960 ) )).xx;
    float2 temp_output_61_0_g23969 = float2( 0,0 );
    float2 appendResult1409_g23919 = (float2(ase_vertex3Pos.y , ase_vertex3Pos.z));
    float2 temp_output_1_0_g23970 = ( (WIND_VARIATION1211_g23919).xx + appendResult1409_g23919 );
    float WIND_GUST_LEAF_MICRO_FIELD_SIZE1191_g23919 = _WIND_GUST_LEAF_MICRO_FIELD_SIZE;
    float temp_output_2_0_g23965 = WIND_GUST_LEAF_MICRO_FIELD_SIZE1191_g23919;
    float temp_output_40_0_g23969 = ( 1.0 / (( temp_output_2_0_g23965 == 0.0 ) ? 1.0 :  temp_output_2_0_g23965 ) );
    float2 temp_cast_48 = (temp_output_40_0_g23969).xx;
    float2 temp_output_2_0_g23970 = temp_cast_48;
    float2 panner90_g23969 = ( _Time.y * temp_cast_47 + ( (( temp_output_61_0_g23969 > float2( 0,0 ) ) ? ( temp_output_1_0_g23970 / temp_output_2_0_g23970 ) :  ( temp_output_1_0_g23970 * temp_output_2_0_g23970 ) ) + temp_output_61_0_g23969 ));
    float temp_output_679_0_g23959 = 1.0;
    float4 temp_cast_49 = (temp_output_679_0_g23959).xxxx;
    float4 temp_output_52_0_g23969 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g23969, 0, 0.0) ) , temp_cast_49 ) );
    float4 lerpResult656_g23959 = lerp( color658_g23959 , temp_output_52_0_g23969 , temp_output_679_0_g23959);
    float4 break655_g23959 = lerpResult656_g23959;
    float LEAF_GUST_MICRO1408_g23919 = ( WIND_GUST_LEAF_MICRO_STRENGTH1189_g23919 * WIND_GUST_AUDIO_VERYHIGH1243_g23919 * break655_g23959.a );
    float _WIND_GUST_STRENGTH_MICRO851_g24068 = LEAF_GUST_MICRO1408_g23919;
    float clampResult3_g24078 = clamp( _WIND_GUST_STRENGTH_MICRO851_g24068 , 0.0 , 1.0 );
    float temp_output_3_0_g24081 = ( ( clampResult3_g24078 * 2.0 ) - 1.0 );
    float lerpResult1_g24087 = lerp( ( _WIND_GUST_STRENGTH_MICRO851_g24068 - 1.0 ) , temp_output_3_0_g24081 , saturate( ( 1.0 + clampResult13_g24081 ) ));
    float lerpResult1_g24082 = lerp( temp_output_3_0_g24081 , _WIND_GUST_STRENGTH_MICRO851_g24068 , saturate( clampResult13_g24081 ));
    float3 _GUST_MICRO1020_g24068 = ( worldToObjDir1006_g24068 * (( clampResult13_g24081 < 0.0 ) ? lerpResult1_g24087 :  lerpResult1_g24082 ) );
    float3 lerpResult538_g24068 = lerp( temp_output_684_0_g24068 , ( temp_output_684_0_g24068 + ( ( _GUST1018_g24068 + _GUST_MID1019_g24068 + _GUST_MICRO1020_g24068 ) * _WIND_TERTIARY_ROLL669_g24068 ) ) , WIND_GUST_AUDIO_STRENGTH1242_g23919);
    float3 MOTION_LEAF1343_g23919 = lerpResult538_g24068;
    float3 temp_output_19_0_g24015 = MOTION_LEAF1343_g23919;
    float3 temp_output_20_0_g24015 = float3(0,0,0);
    float3 temp_output_41_0_g23298 = ( ( WIND_TRUNK_STRENGTH1235_g23919 * MOTION_TRUNK1337_g23919 ) + ( WIND_BRANCH_STRENGTH1224_g23919 * MOTION_BRANCH1339_g23919 ) + ( WIND_LEAF_STRENGTH1179_g23919 * (( temp_output_17_0_g24015 == temp_output_18_0_g24015 ) ? temp_output_19_0_g24015 :  temp_output_20_0_g24015 ) ) );
    float temp_output_63_0_g23299 = (( unity_LODFade.x >= 1E-06 && unity_LODFade.x <= 0.999999 ) ? unity_LODFade.x :  1.0 );
    float3 lerpResult57_g23299 = lerp( temp_output_41_0_g23298 , -ase_vertex3Pos , ( 1.0 - temp_output_63_0_g23299 ));
    #ifdef INTERNAL_LODFADE_SCALE
        float3 staticSwitch58_g23298 = lerpResult57_g23299;
    #else
        float3 staticSwitch58_g23298 = temp_output_41_0_g23298;
    #endif
    #ifdef LOD_FADE_CROSSFADE
        float3 staticSwitch62_g23298 = staticSwitch58_g23298;
    #else
        float3 staticSwitch62_g23298 = temp_output_41_0_g23298;
    #endif
    v.vertex.xyz += staticSwitch62_g23298;
}
		
void vertexDataFunc_grass( inout appdata_full v )
{
#ifdef _BILLBOARD_ON
    //Calculate new billboard vertex position and normal;
    float3 upCamVec = float3( 0, 1, 0 );
    float3 forwardCamVec = -normalize ( UNITY_MATRIX_V._m20_m21_m22 );
    float3 rightCamVec = normalize( UNITY_MATRIX_V._m00_m01_m02 );
    float4x4 rotationCamMatrix = float4x4( rightCamVec, 0, upCamVec, 0, forwardCamVec, 0, 0, 0, 0, 1 );
    v.normal = normalize( mul( float4( v.normal , 0 ), rotationCamMatrix )).xyz;
    //This unfortunately must be made to take non-uniform scaling into account;
    //Transform to world coords, apply rotation and transform back to local;
    v.vertex = mul( v.vertex , unity_ObjectToWorld );
    v.vertex = mul( v.vertex , rotationCamMatrix );
    v.vertex = mul( v.vertex , unity_WorldToObject );
#endif
    float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
    float3 break602_g27268 = ase_worldPos;
    float worldPos_X_vertex604_g27268 = break602_g27268.x;
    float temp_output_16_0_g27268 = ( ( worldPos_X_vertex604_g27268 - _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.x ) / _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.w );
    float worldPos_Z_vertex606_g27268 = break602_g27268.z;
    float temp_output_187_0_g27268 = ( ( -worldPos_Z_vertex606_g27268 - _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.z ) / _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.w );
    float2 appendResult188_g27268 = (float2(( 1.0 - saturate( temp_output_16_0_g27268 ) ) , ( 1.0 - saturate( temp_output_187_0_g27268 ) )));
    float2 tbPos_vertex98_g27268 = appendResult188_g27268;
    float4 tex2DNode518_g27268 = tex2Dlod( _TOUCHBEND_CURRENT_STATE_MAP_MASK, float4( tbPos_vertex98_g27268, 0, 0.0) );
    float mask_r650_g27268 = tex2DNode518_g27268.r;
    float temp_output_270_0_g27268 = 1E-06;
    float temp_output_269_0_g27268 = 0.999999;
    float temp_output_272_0_g27268 = 1.0;
    float temp_output_273_0_g27268 = 0.0;
    float IN_BEND_RADIUS96_g27268 = saturate( ( (( temp_output_16_0_g27268 >= temp_output_270_0_g27268 && temp_output_16_0_g27268 <= temp_output_269_0_g27268 ) ? temp_output_272_0_g27268 :  temp_output_273_0_g27268 ) * (( temp_output_187_0_g27268 >= temp_output_270_0_g27268 && temp_output_187_0_g27268 <= temp_output_269_0_g27268 ) ? temp_output_272_0_g27268 :  temp_output_273_0_g27268 ) ) );
    float worldPos_Y_vertex605_g27268 = break602_g27268.y;
    float4 tex2DNode18_g27268 = tex2Dlod( _TOUCHBEND_CURRENT_STATE_MAP_SPATIAL, float4( tbPos_vertex98_g27268, 0, 0.0) );
    float4 _Vector0 = float4(0,0,0,0);
    float4 _Vector1 = float4(1,1,1,1);
    float4 _UP_LOW = float4(0,0,0,0);
    float height_eligible586_g27268 = saturate( ( worldPos_Y_vertex605_g27268 - ( ((_UP_LOW).x + (tex2DNode18_g27268.g - _Vector0.x) * (1024.0 - (_UP_LOW).x) / (_Vector1.x - _Vector0.x)) - 0.5 ) ) );
    float temp_output_426_0_g27268 = ( ( 1.0 - step( mask_r650_g27268 , 0.0 ) ) * IN_BEND_RADIUS96_g27268 * height_eligible586_g27268 );
    float displacement_amount599_g27268 = saturate( ( mask_r650_g27268 * temp_output_426_0_g27268 ) );
    float3 temp_output_815_481_g27265 = displacement_amount599_g27268;
    #ifdef _HEIGHTBASEDWIND_ON
        float staticSwitch2605 = ( ase_worldPos.y * _HeightWindStrength );
    #else
        float staticSwitch2605 = v.color.r;
    #endif
    float _GRASS_BEND_AVAILABILITY385_g27265 = saturate( staticSwitch2605 );
    float3 touchbend_amount614_g27265 = ( temp_output_815_481_g27265 * _GRASS_BEND_AVAILABILITY385_g27265 );
    float temp_output_54_0_g27266 = ( touchbend_amount614_g27265 * -2.0 ).x;
    float temp_output_72_0_g27266 = cos( temp_output_54_0_g27266 );
    float one_minus_c52_g27266 = ( 1.0 - temp_output_72_0_g27266 );
    float3 worldToObjDir680_g27265 = mul( unity_WorldToObject, float4( float3(0,1,0), 0 ) ).xyz;
    float3 appendResult366_g27268 = (float3(( 1.0 - tex2DNode18_g27268.r ) , 0.5 , ( 1.0 - tex2DNode18_g27268.b )));
    float3 temp_output_362_0_g27268 = (appendResult366_g27268*2.0 + -1.0);
    float3 worldToObjDir455_g27268 = normalize( mul( unity_WorldToObject, float4( temp_output_362_0_g27268, 0 ) ).xyz );
    float3 break445_g27265 = worldToObjDir455_g27268;
    float3 appendResult469_g27265 = (float3(break445_g27265.x , break445_g27265.y , break445_g27265.z));
    float3 break70_g27266 = cross( worldToObjDir680_g27265 , appendResult469_g27265 );
    float axis_x25_g27266 = break70_g27266.x;
    float c66_g27266 = temp_output_72_0_g27266;
    float axis_y37_g27266 = break70_g27266.y;
    float axis_z29_g27266 = break70_g27266.z;
    float s67_g27266 = sin( temp_output_54_0_g27266 );
    float3 appendResult83_g27266 = (float3(( ( one_minus_c52_g27266 * axis_x25_g27266 * axis_x25_g27266 ) + c66_g27266 ) , ( ( one_minus_c52_g27266 * axis_x25_g27266 * axis_y37_g27266 ) - ( axis_z29_g27266 * s67_g27266 ) ) , ( ( one_minus_c52_g27266 * axis_z29_g27266 * axis_x25_g27266 ) + ( axis_y37_g27266 * s67_g27266 ) )));
    float3 appendResult81_g27266 = (float3(( ( one_minus_c52_g27266 * axis_x25_g27266 * axis_y37_g27266 ) + ( axis_z29_g27266 * s67_g27266 ) ) , ( ( one_minus_c52_g27266 * axis_y37_g27266 * axis_y37_g27266 ) + c66_g27266 ) , ( ( one_minus_c52_g27266 * axis_y37_g27266 * axis_z29_g27266 ) - ( axis_x25_g27266 * s67_g27266 ) )));
    float3 appendResult82_g27266 = (float3(( ( one_minus_c52_g27266 * axis_z29_g27266 * axis_x25_g27266 ) - ( axis_y37_g27266 * s67_g27266 ) ) , ( ( one_minus_c52_g27266 * axis_y37_g27266 * axis_z29_g27266 ) + ( axis_x25_g27266 * s67_g27266 ) ) , ( ( one_minus_c52_g27266 * axis_z29_g27266 * axis_z29_g27266 ) + c66_g27266 )));
    float3 ase_vertex3Pos = v.vertex.xyz;
    float3 appendResult2162 = (float3(-v.texcoord1.xy.x , 0.0 , v.texcoord1.xy.y));
    float3 pivot_object_space717_g27265 = appendResult2162;
    float3 temp_output_38_0_g27266 = ( ase_vertex3Pos - (pivot_object_space717_g27265).xyz );
    float3 temp_output_677_84_g27265 = ( mul( float3x3(appendResult83_g27266, appendResult81_g27266, appendResult82_g27266), temp_output_38_0_g27266 ) - temp_output_38_0_g27266 );
    float3 pos130_g27265 = ase_vertex3Pos;
    float3 appendResult534_g27265 = (float3(0.0 , -pos130_g27265.y , 0.0));
    float3 lerpResult692_g27265 = lerp( temp_output_677_84_g27265 , ( temp_output_677_84_g27265 + ( appendResult534_g27265 * touchbend_amount614_g27265 ) ) , touchbend_amount614_g27265);
    float GRASS_STRENGTH1499_g27193 = _WIND_GRASS_STRENGTH;
    float _WIND_PRIMARY_ROLL669_g27244 = staticSwitch2605;
    half localunity_ObjectToWorld0w1_g27196 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g27196 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g27196 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g27196 = (float3(localunity_ObjectToWorld0w1_g27196 , localunity_ObjectToWorld1w2_g27196 , localunity_ObjectToWorld2w3_g27196));
    float2 UV_POSITION_OBJECT1504_g27193 = (appendResult6_g27196).xz;
    float BASE_FIELD_SIZE1503_g27193 = _WIND_BASE_GRASS_FIELD_SIZE;
    float temp_output_2_0_g27230 = _WIND_BASE_GRASS_CYCLE_TIME;
    float BASE_FREQUENCY1498_g27193 = ( 1.0 / (( temp_output_2_0_g27230 == 0.0 ) ? 1.0 :  temp_output_2_0_g27230 ) );
    float2 break298_g27245 = ( ( UV_POSITION_OBJECT1504_g27193 * BASE_FIELD_SIZE1503_g27193 ) + ( BASE_FREQUENCY1498_g27193 * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g27245 = (float2(sin( break298_g27245.x ) , cos( break298_g27245.y )));
    float4 temp_output_273_0_g27245 = (-1.0).xxxx;
    float4 temp_output_271_0_g27245 = (1.0).xxxx;
    float2 clampResult26_g27245 = clamp( appendResult299_g27245 , temp_output_273_0_g27245.xy , temp_output_271_0_g27245.xy );
    float BASE_GRASS_STRENGTH1628_g27193 = _WIND_BASE_GRASS_STRENGTH;
    float BASE_AMPLITUDE1549_g27193 = _WIND_BASE_AMPLITUDE;
    float2 break699_g27244 = ( clampResult26_g27245 * ( BASE_GRASS_STRENGTH1628_g27193 * BASE_AMPLITUDE1549_g27193 ) );
    float3 appendResult698_g27244 = (float3(break699_g27244.x , 0.0 , break699_g27244.y));
    float3 temp_output_684_0_g27244 = ( _WIND_PRIMARY_ROLL669_g27244 * (appendResult698_g27244).xyz );
    float3 ase_vertexNormal = v.normal.xyz;
    float3 _VERTEX_NORMAL918_g27244 = ase_vertexNormal;
    float lerpResult632_g27242 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH , _WIND_AUDIO_INFLUENCE);
    float AUDIO_BLEND1671_g27193 = lerpResult632_g27242;
    float temp_output_15_0_g27243 = AUDIO_BLEND1671_g27193;
    float lerpResult638_g27242 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_VERYHIGH , _WIND_AUDIO_INFLUENCE);
    float AUDIO_VERYHIGH1639_g27193 = lerpResult638_g27242;
    float temp_output_16_0_g27243 = AUDIO_VERYHIGH1639_g27193;
    float GUST_MICRO_STRENGTH1513_g27193 = _WIND_GUST_GRASS_MICRO_STRENGTH;
    float4 color658_g27198 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float GUST_MICRO_CYCLE_TIME1514_g27193 = _WIND_GUST_GRASS_MICRO_CYCLE_TIME;
    float temp_output_2_0_g27199 = GUST_MICRO_CYCLE_TIME1514_g27193;
    float2 temp_cast_5 = (( 1.0 / (( temp_output_2_0_g27199 == 0.0 ) ? 1.0 :  temp_output_2_0_g27199 ) )).xx;
    float2 temp_output_61_0_g27208 = float2( 0,0 );
    half localunity_ObjectToWorld0w1_g27224 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g27224 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g27224 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g27224 = (float3(localunity_ObjectToWorld0w1_g27224 , localunity_ObjectToWorld1w2_g27224 , localunity_ObjectToWorld2w3_g27224));
    float3 appendResult1493_g27193 = (float3(-v.texcoord1.xy.x , 0.0 , v.texcoord1.xy.y));
    float3 PLANE_PIVOT1494_g27193 = appendResult1493_g27193;
    float2 appendResult1587_g27193 = (float2(ase_vertex3Pos.x , ase_vertex3Pos.x));
    float2 temp_output_1_0_g27209 = ( (appendResult6_g27224).xz + (PLANE_PIVOT1494_g27193).xz + appendResult1587_g27193 );
    float GUST_MICRO_FIELD_SIZE1515_g27193 = _WIND_GUST_GRASS_MICRO_FIELD_SIZE;
    float temp_output_2_0_g27204 = GUST_MICRO_FIELD_SIZE1515_g27193;
    float temp_output_40_0_g27208 = ( 1.0 / (( temp_output_2_0_g27204 == 0.0 ) ? 1.0 :  temp_output_2_0_g27204 ) );
    float2 temp_cast_6 = (temp_output_40_0_g27208).xx;
    float2 temp_output_2_0_g27209 = temp_cast_6;
    float2 panner90_g27208 = ( _Time.y * temp_cast_5 + ( (( temp_output_61_0_g27208 > float2( 0,0 ) ) ? ( temp_output_1_0_g27209 / temp_output_2_0_g27209 ) :  ( temp_output_1_0_g27209 * temp_output_2_0_g27209 ) ) + temp_output_61_0_g27208 ));
    float temp_output_679_0_g27198 = 1.0;
    float4 temp_cast_7 = (temp_output_679_0_g27198).xxxx;
    float4 temp_output_52_0_g27208 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g27208, 0, 0.0) ) , temp_cast_7 ) );
    float4 lerpResult656_g27198 = lerp( color658_g27198 , temp_output_52_0_g27208 , temp_output_679_0_g27198);
    float4 break655_g27198 = lerpResult656_g27198;
    float clampResult3_g27262 = clamp( ( 1.0 - break655_g27198.r ) , 0.0 , 1.0 );
    float GUST_MICRO1651_g27193 = ( ( ( temp_output_15_0_g27243 + temp_output_16_0_g27243 ) / 2.0 ) * GUST_MICRO_STRENGTH1513_g27193 * ( ( clampResult3_g27262 * 2.0 ) - 1.0 ) );
    float _GUST_STRENGTH_MICRO769_g27244 = GUST_MICRO1651_g27193;
    float3 GUST_MICRO816_g27244 = ( _VERTEX_NORMAL918_g27244 * _WIND_PRIMARY_ROLL669_g27244 * _GUST_STRENGTH_MICRO769_g27244 );
    float GUST_STRENGTH1624_g27193 = _WIND_GUST_GRASS_STRENGTH;
    float lerpResult633_g27242 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_HIGH , _WIND_AUDIO_INFLUENCE);
    float AUDIO_HIGH1640_g27193 = lerpResult633_g27242;
    float4 color658_g27212 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float2 appendResult1567_g27193 = (float2(-v.texcoord1.xy.x , v.texcoord1.xy.x));
    float2 UV_PLANE1566_g27193 = appendResult1567_g27193;
    float clampResult3_g27210 = clamp( (UV_PLANE1566_g27193).x , 0.0 , 1.0 );
    float GUST_CYCLE_TIME1511_g27193 = _WIND_GUST_GRASS_CYCLE_TIME;
    float temp_output_2_0_g27213 = ( ( ( ( clampResult3_g27210 * 2.0 ) - 1.0 ) * 0.15 * GUST_CYCLE_TIME1511_g27193 ) + GUST_CYCLE_TIME1511_g27193 );
    float2 temp_cast_8 = (( 1.0 / (( temp_output_2_0_g27213 == 0.0 ) ? 1.0 :  temp_output_2_0_g27213 ) )).xx;
    float2 temp_output_61_0_g27222 = float2( 0,0 );
    half localunity_ObjectToWorld0w1_g27194 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld2w3_g27194 = ( unity_ObjectToWorld[2].w );
    float2 appendResult1608_g27193 = (float2(localunity_ObjectToWorld0w1_g27194 , localunity_ObjectToWorld2w3_g27194));
    float2 temp_output_1_0_g27223 = ( ( 10.0 * UV_PLANE1566_g27193 ) + appendResult1608_g27193 );
    float GUST_FIELD_SIZE1512_g27193 = _WIND_GUST_GRASS_FIELD_SIZE;
    float temp_output_2_0_g27218 = GUST_FIELD_SIZE1512_g27193;
    float temp_output_40_0_g27222 = ( 1.0 / (( temp_output_2_0_g27218 == 0.0 ) ? 1.0 :  temp_output_2_0_g27218 ) );
    float2 temp_cast_9 = (temp_output_40_0_g27222).xx;
    float2 temp_output_2_0_g27223 = temp_cast_9;
    float2 panner90_g27222 = ( _Time.y * temp_cast_8 + ( (( temp_output_61_0_g27222 > float2( 0,0 ) ) ? ( temp_output_1_0_g27223 / temp_output_2_0_g27223 ) :  ( temp_output_1_0_g27223 * temp_output_2_0_g27223 ) ) + temp_output_61_0_g27222 ));
    float temp_output_679_0_g27212 = 1.0;
    float4 temp_cast_10 = (temp_output_679_0_g27212).xxxx;
    float4 temp_output_52_0_g27222 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g27222, 0, 0.0) ) , temp_cast_10 ) );
    float4 lerpResult656_g27212 = lerp( color658_g27212 , temp_output_52_0_g27222 , temp_output_679_0_g27212);
    float4 break655_g27212 = lerpResult656_g27212;
    float GUST1666_g27193 = ( GUST_STRENGTH1624_g27193 * AUDIO_HIGH1640_g27193 * break655_g27212.b );
    float _GUST_STRENGTH845_g27244 = GUST1666_g27193;
    float temp_output_54_0_g27249 = _GUST_STRENGTH845_g27244;
    float temp_output_72_0_g27249 = cos( temp_output_54_0_g27249 );
    float one_minus_c52_g27249 = ( 1.0 - temp_output_72_0_g27249 );
    float3 WIND_DIRECTION1507_g27193 = _WIND_DIRECTION;
    float3 _WIND_DIRECTION671_g27244 = WIND_DIRECTION1507_g27193;
    float3 worldToObjDir963_g27244 = normalize( mul( unity_WorldToObject, float4( cross( -_WIND_DIRECTION671_g27244 , float3(0,1,0) ), 0 ) ).xyz );
    float3 break70_g27249 = worldToObjDir963_g27244;
    float axis_x25_g27249 = break70_g27249.x;
    float c66_g27249 = temp_output_72_0_g27249;
    float axis_y37_g27249 = break70_g27249.y;
    float axis_z29_g27249 = break70_g27249.z;
    float s67_g27249 = sin( temp_output_54_0_g27249 );
    float3 appendResult83_g27249 = (float3(( ( one_minus_c52_g27249 * axis_x25_g27249 * axis_x25_g27249 ) + c66_g27249 ) , ( ( one_minus_c52_g27249 * axis_x25_g27249 * axis_y37_g27249 ) - ( axis_z29_g27249 * s67_g27249 ) ) , ( ( one_minus_c52_g27249 * axis_z29_g27249 * axis_x25_g27249 ) + ( axis_y37_g27249 * s67_g27249 ) )));
    float3 appendResult81_g27249 = (float3(( ( one_minus_c52_g27249 * axis_x25_g27249 * axis_y37_g27249 ) + ( axis_z29_g27249 * s67_g27249 ) ) , ( ( one_minus_c52_g27249 * axis_y37_g27249 * axis_y37_g27249 ) + c66_g27249 ) , ( ( one_minus_c52_g27249 * axis_y37_g27249 * axis_z29_g27249 ) - ( axis_x25_g27249 * s67_g27249 ) )));
    float3 appendResult82_g27249 = (float3(( ( one_minus_c52_g27249 * axis_z29_g27249 * axis_x25_g27249 ) - ( axis_y37_g27249 * s67_g27249 ) ) , ( ( one_minus_c52_g27249 * axis_y37_g27249 * axis_z29_g27249 ) + ( axis_x25_g27249 * s67_g27249 ) ) , ( ( one_minus_c52_g27249 * axis_z29_g27249 * axis_z29_g27249 ) + c66_g27249 )));
    float3 appendResult962_g27244 = (float3(ase_vertex3Pos.x , 0.0 , ase_vertex3Pos.z));
    float3 temp_output_38_0_g27249 = ( ase_vertex3Pos - (appendResult962_g27244).xyz );
    float3 GUST798_g27244 = ( _WIND_PRIMARY_ROLL669_g27244 * ( mul( float3x3(appendResult83_g27249, appendResult81_g27249, appendResult82_g27249), temp_output_38_0_g27249 ) - temp_output_38_0_g27249 ) );
    float3 worldToObjDir921_g27244 = mul( unity_WorldToObject, float4( _WIND_DIRECTION671_g27244, 0 ) ).xyz;
    float GUST_MID_STRENGTH1625_g27193 = _WIND_GUST_GRASS_MID_STRENGTH;
    float temp_output_15_0_g27264 = AUDIO_VERYHIGH1639_g27193;
    float temp_output_16_0_g27264 = AUDIO_HIGH1640_g27193;
    float4 color658_g27250 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float GUST_MID_CYCLE_TIME1626_g27193 = _WIND_GUST_GRASS_MID_CYCLE_TIME;
    float temp_output_2_0_g27251 = GUST_MID_CYCLE_TIME1626_g27193;
    float2 temp_cast_11 = (( 1.0 / (( temp_output_2_0_g27251 == 0.0 ) ? 1.0 :  temp_output_2_0_g27251 ) )).xx;
    float2 temp_output_61_0_g27260 = float2( 0,0 );
    half localunity_ObjectToWorld0w1_g27197 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g27197 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g27197 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g27197 = (float3(localunity_ObjectToWorld0w1_g27197 , localunity_ObjectToWorld1w2_g27197 , localunity_ObjectToWorld2w3_g27197));
    float2 appendResult1723_g27193 = (float2(ase_vertex3Pos.y , ase_vertex3Pos.y));
    float2 temp_output_1_0_g27261 = ( (appendResult6_g27197).xz + (PLANE_PIVOT1494_g27193).xz + appendResult1723_g27193 );
    float GUST_MID_FIELD_SIZE1627_g27193 = _WIND_GUST_GRASS_MID_FIELD_SIZE;
    float temp_output_2_0_g27256 = GUST_MID_FIELD_SIZE1627_g27193;
    float temp_output_40_0_g27260 = ( 1.0 / (( temp_output_2_0_g27256 == 0.0 ) ? 1.0 :  temp_output_2_0_g27256 ) );
    float2 temp_cast_12 = (temp_output_40_0_g27260).xx;
    float2 temp_output_2_0_g27261 = temp_cast_12;
    float2 panner90_g27260 = ( _Time.y * temp_cast_11 + ( (( temp_output_61_0_g27260 > float2( 0,0 ) ) ? ( temp_output_1_0_g27261 / temp_output_2_0_g27261 ) :  ( temp_output_1_0_g27261 * temp_output_2_0_g27261 ) ) + temp_output_61_0_g27260 ));
    float temp_output_679_0_g27250 = 1.0;
    float4 temp_cast_13 = (temp_output_679_0_g27250).xxxx;
    float4 temp_output_52_0_g27260 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g27260, 0, 0.0) ) , temp_cast_13 ) );
    float4 lerpResult656_g27250 = lerp( color658_g27250 , temp_output_52_0_g27260 , temp_output_679_0_g27250);
    float4 break655_g27250 = lerpResult656_g27250;
    float GUST_MID1664_g27193 = ( GUST_MID_STRENGTH1625_g27193 * ( ( temp_output_15_0_g27264 + temp_output_16_0_g27264 ) / 2.0 ) * ( 1.0 - break655_g27250.r ) );
    float _GUST_STRENGTH_MID842_g27244 = GUST_MID1664_g27193;
    float3 GUST_MID926_g27244 = ( _WIND_PRIMARY_ROLL669_g27244 * ( worldToObjDir921_g27244 * _GUST_STRENGTH_MID842_g27244 ) );
    float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
    float3 _vec_min_old = float3(1,1,1);
    float3 _vec_max_old = float3(7,7,7);
    float3 clampResult934_g27244 = clamp( ase_objectScale , _vec_min_old , _vec_max_old );
    float3 lerpResult538_g27244 = lerp( temp_output_684_0_g27244 , ( temp_output_684_0_g27244 + ( GUST_MICRO816_g27244 + ( ( GUST798_g27244 + GUST_MID926_g27244 ) * (float3(1,1,1) + (clampResult934_g27244 - _vec_min_old) * (float3(3,3,3) - float3(1,1,1)) / (_vec_max_old - _vec_min_old)) ) ) ) , AUDIO_BLEND1671_g27193);
    float3 UPDATED_OFFSET611_g27265 = ( ( 1.0 - touchbend_amount614_g27265 ) * ( GRASS_STRENGTH1499_g27193 * lerpResult538_g27244 ) );
    half localunity_ObjectToWorld0w1_g27267 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g27267 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g27267 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g27267 = (float3(localunity_ObjectToWorld0w1_g27267 , localunity_ObjectToWorld1w2_g27267 , localunity_ObjectToWorld2w3_g27267));
    float3 obj_pos_world743_g27265 = appendResult6_g27267;
    float3 break298_g27295 = ( ( ( (obj_pos_world743_g27265).xyz * float3(97.125,91.88,82.1018) ) + (pivot_object_space717_g27265).xyz ) + ( float3(1.8,3.17,2.775) * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g27295 = (float2(sin( break298_g27295.x ) , cos( break298_g27295.y )));
    float4 temp_output_273_0_g27295 = (-1.0).xxxx;
    float4 temp_output_271_0_g27295 = (1.0).xxxx;
    float2 clampResult26_g27295 = clamp( appendResult299_g27295 , temp_output_273_0_g27295.xy , temp_output_271_0_g27295.xy );
    float4 tex2DNode625_g27268 = tex2Dlod( _TOUCHBEND_CURRENT_STATE_MAP_MOTION, float4( tbPos_vertex98_g27268, 0, 0.0) );
    float motion_g655_g27268 = tex2DNode625_g27268.g;
    float temp_output_684_29_g27268 = ((_UP_LOW).x + (motion_g655_g27268 - _Vector0.x) * (8.0 - (_UP_LOW).x) / (_Vector1.x - _Vector0.x));
    float motion_r654_g27268 = tex2DNode625_g27268.r;
    float2 break11_g27270 = tbPos_vertex98_g27268;
    float clampResult3_g27271 = clamp( break11_g27270.x , 0.0 , 1.0 );
    float clampResult3_g27273 = clamp( break11_g27270.y , 0.0 , 1.0 );
    float lerpResult8_g27270 = lerp( 1.0 , 4.0 , max( abs( ( ( clampResult3_g27271 * 2.0 ) - 1.0 ) ) , abs( ( ( clampResult3_g27273 * 2.0 ) - 1.0 ) ) ));
    float updated_motion_r702_g27268 = ( motion_r654_g27268 * lerpResult8_g27270 );
    float temp_output_7_0_g27282 = 0.0;
    float movement_amount628_g27268 = ( ( ( temp_output_684_29_g27268 * saturate( ( updated_motion_r702_g27268 - ( mask_r650_g27268 * 2.5 ) ) ) * IN_BEND_RADIUS96_g27268 ) - temp_output_7_0_g27282 ) / ( 8.0 - temp_output_7_0_g27282 ) );
    float movement721_g27265 = ( _GRASS_BEND_AVAILABILITY385_g27265 * movement_amount628_g27268 );
    float3 break702_g27265 = ( float3( clampResult26_g27295 ,  0.0 ) * ( pow( movement721_g27265 , 2.0 ) * float3(1,0.4,0.93) ) );
    float3 appendResult704_g27265 = (float3(break702_g27265.x , break702_g27265.y , break702_g27265.z));
    float3 temp_output_2_0_g27291 = ase_objectScale;
    float3 temp_cast_19 = (0.0).xxx;
    float3 temp_cast_20 = (1.0).xxx;
    float3 temp_output_1_0_g27290 = ( appendResult704_g27265 * ( 1.0 / (( temp_output_2_0_g27291 == temp_cast_19 ) ? temp_cast_20 :  temp_output_2_0_g27291 ) ) );
    float3 temp_output_728_0_g27265 = temp_output_1_0_g27290;
    float3 temp_output_41_0_g27334 = ( lerpResult692_g27265 + UPDATED_OFFSET611_g27265 + temp_output_728_0_g27265 );
    float temp_output_63_0_g27335 = (( unity_LODFade.x >= 1E-06 && unity_LODFade.x <= 0.999999 ) ? unity_LODFade.x :  1.0 );
    float3 lerpResult57_g27335 = lerp( temp_output_41_0_g27334 , -ase_vertex3Pos , ( 1.0 - temp_output_63_0_g27335 ));
    #ifdef INTERNAL_LODFADE_SCALE
        float3 staticSwitch58_g27334 = lerpResult57_g27335;
    #else
        float3 staticSwitch58_g27334 = temp_output_41_0_g27334;
    #endif
    #ifdef LOD_FADE_CROSSFADE
        float3 staticSwitch62_g27334 = staticSwitch58_g27334;
    #else
        float3 staticSwitch62_g27334 = temp_output_41_0_g27334;
    #endif
    v.vertex.xyz += staticSwitch62_g27334;
}

void vertexDataFunc_plant( inout appdata_full v )
{
#ifdef _BILLBOARD_ON
    //Calculate new billboard vertex position and normal;
    float3 upCamVec = float3( 0, 1, 0 );
    float3 forwardCamVec = -normalize ( UNITY_MATRIX_V._m20_m21_m22 );
    float3 rightCamVec = normalize( UNITY_MATRIX_V._m00_m01_m02 );
    float4x4 rotationCamMatrix = float4x4( rightCamVec, 0, upCamVec, 0, forwardCamVec, 0, 0, 0, 0, 1 );
    v.normal = normalize( mul( float4( v.normal , 0 ), rotationCamMatrix )).xyz;
    v.vertex.x *= length( unity_ObjectToWorld._m00_m10_m20 );
    v.vertex.y *= length( unity_ObjectToWorld._m01_m11_m21 );
    v.vertex.z *= length( unity_ObjectToWorld._m02_m12_m22 );
    v.vertex = mul( v.vertex, rotationCamMatrix );
    v.vertex.xyz += unity_ObjectToWorld._m03_m13_m23;
    //Need to nullify rotation inserted by generated surface shader;
    v.vertex = mul( unity_WorldToObject, v.vertex );
#endif
    float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
    float3 break602_g27569 = ase_worldPos;
    float worldPos_X_vertex604_g27569 = break602_g27569.x;
    float temp_output_16_0_g27569 = ( ( worldPos_X_vertex604_g27569 - _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.x ) / _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.w );
    float worldPos_Z_vertex606_g27569 = break602_g27569.z;
    float temp_output_187_0_g27569 = ( ( -worldPos_Z_vertex606_g27569 - _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.z ) / _TOUCHBEND_CURRENT_STATE_MAP_MIN_XZ.w );
    float2 appendResult188_g27569 = (float2(( 1.0 - saturate( temp_output_16_0_g27569 ) ) , ( 1.0 - saturate( temp_output_187_0_g27569 ) )));
    float2 tbPos_vertex98_g27569 = appendResult188_g27569;
    float4 tex2DNode518_g27569 = tex2Dlod( _TOUCHBEND_CURRENT_STATE_MAP_MASK, float4( tbPos_vertex98_g27569, 0, 0.0) );
    float mask_r650_g27569 = tex2DNode518_g27569.r;
    float temp_output_270_0_g27569 = 1E-06;
    float temp_output_269_0_g27569 = 0.999999;
    float temp_output_272_0_g27569 = 1.0;
    float temp_output_273_0_g27569 = 0.0;
    float IN_BEND_RADIUS96_g27569 = saturate( ( (( temp_output_16_0_g27569 >= temp_output_270_0_g27569 && temp_output_16_0_g27569 <= temp_output_269_0_g27569 ) ? temp_output_272_0_g27569 :  temp_output_273_0_g27569 ) * (( temp_output_187_0_g27569 >= temp_output_270_0_g27569 && temp_output_187_0_g27569 <= temp_output_269_0_g27569 ) ? temp_output_272_0_g27569 :  temp_output_273_0_g27569 ) ) );
    float worldPos_Y_vertex605_g27569 = break602_g27569.y;
    float4 tex2DNode18_g27569 = tex2Dlod( _TOUCHBEND_CURRENT_STATE_MAP_SPATIAL, float4( tbPos_vertex98_g27569, 0, 0.0) );
    float4 _Vector0 = float4(0,0,0,0);
    float4 _Vector1 = float4(1,1,1,1);
    float4 _UP_LOW = float4(0,0,0,0);
    float height_eligible586_g27569 = saturate( ( worldPos_Y_vertex605_g27569 - ( ((_UP_LOW).x + (tex2DNode18_g27569.g - _Vector0.x) * (1024.0 - (_UP_LOW).x) / (_Vector1.x - _Vector0.x)) - 0.5 ) ) );
    float temp_output_426_0_g27569 = ( ( 1.0 - step( mask_r650_g27569 , 0.0 ) ) * IN_BEND_RADIUS96_g27569 * height_eligible586_g27569 );
    float displacement_amount599_g27569 = saturate( ( mask_r650_g27569 * temp_output_426_0_g27569 ) );
    float3 temp_output_815_481_g27566 = displacement_amount599_g27569;
    #ifdef _HEIGHTBASEDWIND_ON
        float staticSwitch2605 = ( ase_worldPos.y * _HeightWindStrength );
    #else
        float staticSwitch2605 = v.color.r;
    #endif
    float _GRASS_BEND_AVAILABILITY385_g27566 = saturate( staticSwitch2605 );
    float3 touchbend_amount614_g27566 = ( temp_output_815_481_g27566 * _GRASS_BEND_AVAILABILITY385_g27566 );
    float temp_output_54_0_g27567 = ( touchbend_amount614_g27566 * -2.0 ).x;
    float temp_output_72_0_g27567 = cos( temp_output_54_0_g27567 );
    float one_minus_c52_g27567 = ( 1.0 - temp_output_72_0_g27567 );
    float3 worldToObjDir680_g27566 = mul( unity_WorldToObject, float4( float3(0,1,0), 0 ) ).xyz;
    float3 appendResult366_g27569 = (float3(( 1.0 - tex2DNode18_g27569.r ) , 0.5 , ( 1.0 - tex2DNode18_g27569.b )));
    float3 temp_output_362_0_g27569 = (appendResult366_g27569*2.0 + -1.0);
    float3 worldToObjDir455_g27569 = normalize( mul( unity_WorldToObject, float4( temp_output_362_0_g27569, 0 ) ).xyz );
    float3 break445_g27566 = worldToObjDir455_g27569;
    float3 appendResult469_g27566 = (float3(break445_g27566.x , break445_g27566.y , break445_g27566.z));
    float3 break70_g27567 = cross( worldToObjDir680_g27566 , appendResult469_g27566 );
    float axis_x25_g27567 = break70_g27567.x;
    float c66_g27567 = temp_output_72_0_g27567;
    float axis_y37_g27567 = break70_g27567.y;
    float axis_z29_g27567 = break70_g27567.z;
    float s67_g27567 = sin( temp_output_54_0_g27567 );
    float3 appendResult83_g27567 = (float3(( ( one_minus_c52_g27567 * axis_x25_g27567 * axis_x25_g27567 ) + c66_g27567 ) , ( ( one_minus_c52_g27567 * axis_x25_g27567 * axis_y37_g27567 ) - ( axis_z29_g27567 * s67_g27567 ) ) , ( ( one_minus_c52_g27567 * axis_z29_g27567 * axis_x25_g27567 ) + ( axis_y37_g27567 * s67_g27567 ) )));
    float3 appendResult81_g27567 = (float3(( ( one_minus_c52_g27567 * axis_x25_g27567 * axis_y37_g27567 ) + ( axis_z29_g27567 * s67_g27567 ) ) , ( ( one_minus_c52_g27567 * axis_y37_g27567 * axis_y37_g27567 ) + c66_g27567 ) , ( ( one_minus_c52_g27567 * axis_y37_g27567 * axis_z29_g27567 ) - ( axis_x25_g27567 * s67_g27567 ) )));
    float3 appendResult82_g27567 = (float3(( ( one_minus_c52_g27567 * axis_z29_g27567 * axis_x25_g27567 ) - ( axis_y37_g27567 * s67_g27567 ) ) , ( ( one_minus_c52_g27567 * axis_y37_g27567 * axis_z29_g27567 ) + ( axis_x25_g27567 * s67_g27567 ) ) , ( ( one_minus_c52_g27567 * axis_z29_g27567 * axis_z29_g27567 ) + c66_g27567 )));
    float3 ase_vertex3Pos = v.vertex.xyz;
    float3 appendResult2162 = (float3(-v.texcoord1.xy.x , 0.0 , v.texcoord1.xy.y));
    float3 pivot_object_space717_g27566 = appendResult2162;
    float3 temp_output_38_0_g27567 = ( ase_vertex3Pos - (pivot_object_space717_g27566).xyz );
    float3 temp_output_677_84_g27566 = ( mul( float3x3(appendResult83_g27567, appendResult81_g27567, appendResult82_g27567), temp_output_38_0_g27567 ) - temp_output_38_0_g27567 );
    float3 pos130_g27566 = ase_vertex3Pos;
    float3 appendResult534_g27566 = (float3(0.0 , -pos130_g27566.y , 0.0));
    float3 lerpResult692_g27566 = lerp( temp_output_677_84_g27566 , ( temp_output_677_84_g27566 + ( appendResult534_g27566 * touchbend_amount614_g27566 ) ) , touchbend_amount614_g27566);
    float PLANT_STRENGTH1499_g26743 = _WIND_PLANT_STRENGTH;
    float4 appendResult653_g26773 = (float4(v.color.r , ( 1.0 - v.color.r ) , 0.0 , 0.0));
    float2 uv_WindMask = v.texcoord * _WindMask_ST.xy + _WindMask_ST.zw;
    #if defined(_WINDSTYLE_VERTEXRGBA)
        float4 staticSwitch638_g26773 = v.color;
    #elif defined(_WINDSTYLE_VERTEXQUIXEL)
        float4 staticSwitch638_g26773 = appendResult653_g26773;
    #elif defined(_WINDSTYLE_MASK)
        float4 staticSwitch638_g26773 = (tex2Dlod( _WindMask, float4( uv_WindMask, 0, 0.0) )).rbag;
    #else
        float4 staticSwitch638_g26773 = v.color;
    #endif
    float4 break639_g26773 = staticSwitch638_g26773;
    float _PRIMARY_BEND1756_g26743 = break639_g26773.r;
    float _PRIMARY_BEND966_g26752 = _PRIMARY_BEND1756_g26743;
    half localunity_ObjectToWorld0w1_g26797 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g26797 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g26797 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g26797 = (float3(localunity_ObjectToWorld0w1_g26797 , localunity_ObjectToWorld1w2_g26797 , localunity_ObjectToWorld2w3_g26797));
    float2 UV_POSITION_OBJECT1504_g26743 = (appendResult6_g26797).xz;
    float BASE_FIELD_SIZE1503_g26743 = _WIND_BASE_PLANT_FIELD_SIZE;
    float BASE_FREQUENCY1498_g26743 = ( 1.0 / (( _WIND_BASE_PLANT_CYCLE_TIME == 0.0 ) ? 1.0 :  _WIND_BASE_PLANT_CYCLE_TIME ) );
    float2 break298_g26763 = ( ( UV_POSITION_OBJECT1504_g26743 * BASE_FIELD_SIZE1503_g26743 ) + ( BASE_FREQUENCY1498_g26743 * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g26763 = (float2(sin( break298_g26763.x ) , cos( break298_g26763.y )));
    float4 temp_output_273_0_g26763 = (-1.0).xxxx;
    float4 temp_output_271_0_g26763 = (1.0).xxxx;
    float2 clampResult26_g26763 = clamp( appendResult299_g26763 , temp_output_273_0_g26763.xy , temp_output_271_0_g26763.xy );
    float BASE_PLANT_STRENGTH1628_g26743 = _WIND_BASE_PLANT_STRENGTH;
    float BASE_AMPLITUDE1549_g26743 = _WIND_BASE_AMPLITUDE;
    float2 break699_g26752 = ( clampResult26_g26763 * ( BASE_PLANT_STRENGTH1628_g26743 * BASE_AMPLITUDE1549_g26743 ) );
    float3 appendResult698_g26752 = (float3(break699_g26752.x , 0.0 , break699_g26752.y));
    float3 temp_output_684_0_g26752 = ( _PRIMARY_BEND966_g26752 * (appendResult698_g26752).xyz );
    float3 ase_vertexNormal = v.normal.xyz;
    float3 _VERTEX_NORMAL918_g26752 = ase_vertexNormal;
    float _SECONDARY_FLUTTER1755_g26743 = break639_g26773.g;
    float _SECONDARY_FLUTTER669_g26752 = _SECONDARY_FLUTTER1755_g26743;
    float lerpResult632_g26795 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH , _WIND_AUDIO_INFLUENCE);
    float AUDIO_BLEND1671_g26743 = lerpResult632_g26795;
    float temp_output_15_0_g26751 = AUDIO_BLEND1671_g26743;
    float lerpResult638_g26795 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_VERYHIGH , _WIND_AUDIO_INFLUENCE);
    float AUDIO_VERYHIGH1639_g26743 = lerpResult638_g26795;
    float temp_output_16_0_g26751 = AUDIO_VERYHIGH1639_g26743;
    float GUST_MICRO_STRENGTH1513_g26743 = _WIND_GUST_PLANT_MICRO_STRENGTH;
    float4 color658_g26778 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float GUST_MICRO_CYCLE_TIME1514_g26743 = _WIND_GUST_PLANT_MICRO_CYCLE_TIME;
    float2 temp_cast_9 = (( 1.0 / (( GUST_MICRO_CYCLE_TIME1514_g26743 == 0.0 ) ? 1.0 :  GUST_MICRO_CYCLE_TIME1514_g26743 ) )).xx;
    float2 temp_output_61_0_g26782 = float2( 0,0 );
    float2 temp_output_1_0_g26783 = (ase_vertex3Pos).xy;
    float GUST_MICRO_FIELD_SIZE1515_g26743 = _WIND_GUST_PLANT_MICRO_FIELD_SIZE;
    float temp_output_40_0_g26782 = ( 1.0 / (( GUST_MICRO_FIELD_SIZE1515_g26743 == 0.0 ) ? 1.0 :  GUST_MICRO_FIELD_SIZE1515_g26743 ) );
    float2 temp_cast_10 = (temp_output_40_0_g26782).xx;
    float2 temp_output_2_0_g26783 = temp_cast_10;
    float2 temp_output_3_0_g26783 = temp_output_61_0_g26782;
    float2 panner90_g26782 = ( _Time.y * temp_cast_9 + ( (( temp_output_61_0_g26782 > float2( 0,0 ) ) ? ( temp_output_1_0_g26783 / temp_output_2_0_g26783 ) :  ( temp_output_1_0_g26783 * temp_output_2_0_g26783 ) ) + temp_output_3_0_g26783 ));
    float temp_output_679_0_g26778 = 1.0;
    float4 temp_cast_11 = (temp_output_679_0_g26778).xxxx;
    float4 temp_output_52_0_g26782 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26782, 0, 0.0) ) , temp_cast_11 ) );
    float4 lerpResult656_g26778 = lerp( color658_g26778 , temp_output_52_0_g26782 , temp_output_679_0_g26778);
    float4 break655_g26778 = lerpResult656_g26778;
    float clampResult3_g26799 = clamp( ( 1.0 - break655_g26778.r ) , 0.0 , 1.0 );
    float GUST_MICRO1651_g26743 = ( ( ( temp_output_15_0_g26751 + temp_output_16_0_g26751 ) / 2.0 ) * GUST_MICRO_STRENGTH1513_g26743 * ( ( clampResult3_g26799 * 2.0 ) - 1.0 ) * saturate( distance( float3( 0,0,0 ) , ase_vertex3Pos ) ) );
    float _GUST_STRENGTH_MICRO769_g26752 = GUST_MICRO1651_g26743;
    float3 GUST_MICRO816_g26752 = ( -_VERTEX_NORMAL918_g26752 * _SECONDARY_FLUTTER669_g26752 * _GUST_STRENGTH_MICRO769_g26752 );
    float GUST_STRENGTH1624_g26743 = _WIND_GUST_PLANT_STRENGTH;
    float lerpResult633_g26795 = lerp( _WIND_GUST_AMPLITUDE , _WIND_GUST_AUDIO_STRENGTH_HIGH , _WIND_AUDIO_INFLUENCE);
    float AUDIO_HIGH1640_g26743 = lerpResult633_g26795;
    float4 color658_g26745 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float GUST_CYCLE_TIME1511_g26743 = _WIND_GUST_PLANT_CYCLE_TIME;
    float2 temp_cast_13 = (( 1.0 / (( GUST_CYCLE_TIME1511_g26743 == 0.0 ) ? 1.0 :  GUST_CYCLE_TIME1511_g26743 ) )).xx;
    float2 temp_output_61_0_g26749 = float2( 0,0 );
    half localunity_ObjectToWorld0w1_g26798 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g26798 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g26798 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g26798 = (float3(localunity_ObjectToWorld0w1_g26798 , localunity_ObjectToWorld1w2_g26798 , localunity_ObjectToWorld2w3_g26798));
    float2 temp_output_1767_0_g26743 = (appendResult6_g26798).xz;
    float2 temp_output_1_0_g26750 = temp_output_1767_0_g26743;
    float GUST_FIELD_SIZE1512_g26743 = _WIND_GUST_PLANT_FIELD_SIZE;
    float temp_output_40_0_g26749 = ( 1.0 / (( GUST_FIELD_SIZE1512_g26743 == 0.0 ) ? 1.0 :  GUST_FIELD_SIZE1512_g26743 ) );
    float2 temp_cast_14 = (temp_output_40_0_g26749).xx;
    float2 temp_output_2_0_g26750 = temp_cast_14;
    float2 temp_output_3_0_g26750 = temp_output_61_0_g26749;
    float2 panner90_g26749 = ( _Time.y * temp_cast_13 + ( (( temp_output_61_0_g26749 > float2( 0,0 ) ) ? ( temp_output_1_0_g26750 / temp_output_2_0_g26750 ) :  ( temp_output_1_0_g26750 * temp_output_2_0_g26750 ) ) + temp_output_3_0_g26750 ));
    float temp_output_679_0_g26745 = 1.0;
    float4 temp_cast_15 = (temp_output_679_0_g26745).xxxx;
    float4 temp_output_52_0_g26749 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26749, 0, 0.0) ) , temp_cast_15 ) );
    float4 lerpResult656_g26745 = lerp( color658_g26745 , temp_output_52_0_g26749 , temp_output_679_0_g26745);
    float4 break655_g26745 = lerpResult656_g26745;
    float GUST1666_g26743 = ( GUST_STRENGTH1624_g26743 * AUDIO_HIGH1640_g26743 * ( 0.0 + break655_g26745.b ) );
    float _GUST_STRENGTH845_g26752 = GUST1666_g26743;
    float temp_output_54_0_g26753 = _GUST_STRENGTH845_g26752;
    float temp_output_72_0_g26753 = cos( temp_output_54_0_g26753 );
    float one_minus_c52_g26753 = ( 1.0 - temp_output_72_0_g26753 );
    float3 WIND_DIRECTION1507_g26743 = _WIND_DIRECTION;
    float3 _WIND_DIRECTION671_g26752 = WIND_DIRECTION1507_g26743;
    float3 worldToObjDir963_g26752 = normalize( mul( unity_WorldToObject, float4( cross( -_WIND_DIRECTION671_g26752 , float3(0,1,0) ), 0 ) ).xyz );
    float3 break70_g26753 = worldToObjDir963_g26752;
    float axis_x25_g26753 = break70_g26753.x;
    float c66_g26753 = temp_output_72_0_g26753;
    float axis_y37_g26753 = break70_g26753.y;
    float axis_z29_g26753 = break70_g26753.z;
    float s67_g26753 = sin( temp_output_54_0_g26753 );
    float3 appendResult83_g26753 = (float3(( ( one_minus_c52_g26753 * axis_x25_g26753 * axis_x25_g26753 ) + c66_g26753 ) , ( ( one_minus_c52_g26753 * axis_x25_g26753 * axis_y37_g26753 ) - ( axis_z29_g26753 * s67_g26753 ) ) , ( ( one_minus_c52_g26753 * axis_z29_g26753 * axis_x25_g26753 ) + ( axis_y37_g26753 * s67_g26753 ) )));
    float3 appendResult81_g26753 = (float3(( ( one_minus_c52_g26753 * axis_x25_g26753 * axis_y37_g26753 ) + ( axis_z29_g26753 * s67_g26753 ) ) , ( ( one_minus_c52_g26753 * axis_y37_g26753 * axis_y37_g26753 ) + c66_g26753 ) , ( ( one_minus_c52_g26753 * axis_y37_g26753 * axis_z29_g26753 ) - ( axis_x25_g26753 * s67_g26753 ) )));
    float3 appendResult82_g26753 = (float3(( ( one_minus_c52_g26753 * axis_z29_g26753 * axis_x25_g26753 ) - ( axis_y37_g26753 * s67_g26753 ) ) , ( ( one_minus_c52_g26753 * axis_y37_g26753 * axis_z29_g26753 ) + ( axis_x25_g26753 * s67_g26753 ) ) , ( ( one_minus_c52_g26753 * axis_z29_g26753 * axis_z29_g26753 ) + c66_g26753 )));
    float3 temp_output_38_0_g26753 = ( ase_vertex3Pos - (float3(0,0,0)).xyz );
    float3 GUST798_g26752 = ( _PRIMARY_BEND966_g26752 * ( mul( float3x3(appendResult83_g26753, appendResult81_g26753, appendResult82_g26753), temp_output_38_0_g26753 ) - temp_output_38_0_g26753 ) );
    float3 temp_output_988_0_g26752 = cross( _WIND_DIRECTION671_g26752 , float3(0,1,0) );
    float3 normalizeResult990_g26752 = normalize( ase_vertex3Pos );
    float dotResult991_g26752 = dot( temp_output_988_0_g26752 , normalizeResult990_g26752 );
    float clampResult13_g26754 = clamp( dotResult991_g26752 , -1.0 , 1.0 );
    float GUST_MID_STRENGTH1625_g26743 = _WIND_GUST_PLANT_MID_STRENGTH;
    float temp_output_15_0_g26744 = AUDIO_VERYHIGH1639_g26743;
    float temp_output_16_0_g26744 = AUDIO_HIGH1640_g26743;
    float4 color658_g26767 = IsGammaSpace() ? float4(0.1607843,0.0627451,0.2509804,0.1764706) : float4(0.02217388,0.005181517,0.05126947,0.1764706);
    float GUST_MID_CYCLE_TIME1626_g26743 = _WIND_GUST_PLANT_MID_CYCLE_TIME;
    float2 temp_cast_17 = (( 1.0 / (( GUST_MID_CYCLE_TIME1626_g26743 == 0.0 ) ? 1.0 :  GUST_MID_CYCLE_TIME1626_g26743 ) )).xx;
    float2 temp_output_61_0_g26771 = float2( 0,0 );
    float _VARIATION1757_g26743 = break639_g26773.a;
    float2 temp_output_1_0_g26772 = (saturate( _VARIATION1757_g26743 )).xx;
    float GUST_MID_FIELD_SIZE1627_g26743 = _WIND_GUST_PLANT_MID_FIELD_SIZE;
    float temp_output_40_0_g26771 = ( 1.0 / (( GUST_MID_FIELD_SIZE1627_g26743 == 0.0 ) ? 1.0 :  GUST_MID_FIELD_SIZE1627_g26743 ) );
    float2 temp_cast_18 = (temp_output_40_0_g26771).xx;
    float2 temp_output_2_0_g26772 = temp_cast_18;
    float2 temp_output_3_0_g26772 = temp_output_61_0_g26771;
    float2 panner90_g26771 = ( _Time.y * temp_cast_17 + ( (( temp_output_61_0_g26771 > float2( 0,0 ) ) ? ( temp_output_1_0_g26772 / temp_output_2_0_g26772 ) :  ( temp_output_1_0_g26772 * temp_output_2_0_g26772 ) ) + temp_output_3_0_g26772 ));
    float temp_output_679_0_g26767 = 1.0;
    float4 temp_cast_19 = (temp_output_679_0_g26767).xxxx;
    float4 temp_output_52_0_g26771 = saturate( pow( tex2Dlod( _WIND_GUST_TEXTURE, float4( panner90_g26771, 0, 0.0) ) , temp_cast_19 ) );
    float4 lerpResult656_g26767 = lerp( color658_g26767 , temp_output_52_0_g26771 , temp_output_679_0_g26767);
    float4 break655_g26767 = lerpResult656_g26767;
    float GUST_MID1664_g26743 = ( GUST_MID_STRENGTH1625_g26743 * ( ( temp_output_15_0_g26744 + temp_output_16_0_g26744 ) / 2.0 ) * ( 1.0 - break655_g26767.r ) );
    float _GUST_STRENGTH_MID842_g26752 = GUST_MID1664_g26743;
    float temp_output_54_0_g26762 = _GUST_STRENGTH_MID842_g26752;
    float temp_output_72_0_g26762 = cos( temp_output_54_0_g26762 );
    float one_minus_c52_g26762 = ( 1.0 - temp_output_72_0_g26762 );
    float3 _Vector8 = float3(0,1,0);
    float3 break70_g26762 = _Vector8;
    float axis_x25_g26762 = break70_g26762.x;
    float c66_g26762 = temp_output_72_0_g26762;
    float axis_y37_g26762 = break70_g26762.y;
    float axis_z29_g26762 = break70_g26762.z;
    float s67_g26762 = sin( temp_output_54_0_g26762 );
    float3 appendResult83_g26762 = (float3(( ( one_minus_c52_g26762 * axis_x25_g26762 * axis_x25_g26762 ) + c66_g26762 ) , ( ( one_minus_c52_g26762 * axis_x25_g26762 * axis_y37_g26762 ) - ( axis_z29_g26762 * s67_g26762 ) ) , ( ( one_minus_c52_g26762 * axis_z29_g26762 * axis_x25_g26762 ) + ( axis_y37_g26762 * s67_g26762 ) )));
    float3 appendResult81_g26762 = (float3(( ( one_minus_c52_g26762 * axis_x25_g26762 * axis_y37_g26762 ) + ( axis_z29_g26762 * s67_g26762 ) ) , ( ( one_minus_c52_g26762 * axis_y37_g26762 * axis_y37_g26762 ) + c66_g26762 ) , ( ( one_minus_c52_g26762 * axis_y37_g26762 * axis_z29_g26762 ) - ( axis_x25_g26762 * s67_g26762 ) )));
    float3 appendResult82_g26762 = (float3(( ( one_minus_c52_g26762 * axis_z29_g26762 * axis_x25_g26762 ) - ( axis_y37_g26762 * s67_g26762 ) ) , ( ( one_minus_c52_g26762 * axis_y37_g26762 * axis_z29_g26762 ) + ( axis_x25_g26762 * s67_g26762 ) ) , ( ( one_minus_c52_g26762 * axis_z29_g26762 * axis_z29_g26762 ) + c66_g26762 )));
    float3 temp_output_38_0_g26762 = ( ase_vertex3Pos - (float3(0,0,0)).xyz );
    float4 temp_output_3_0_g26754 = float4(0,0,0,0);
    float4 lerpResult1_g26760 = lerp( float4( ( mul( float3x3(appendResult83_g26762, appendResult81_g26762, appendResult82_g26762), temp_output_38_0_g26762 ) - temp_output_38_0_g26762 ) , 0.0 ) , temp_output_3_0_g26754 , saturate( ( 1.0 + clampResult13_g26754 ) ));
    float temp_output_54_0_g26761 = -_GUST_STRENGTH_MID842_g26752;
    float temp_output_72_0_g26761 = cos( temp_output_54_0_g26761 );
    float one_minus_c52_g26761 = ( 1.0 - temp_output_72_0_g26761 );
    float3 break70_g26761 = _Vector8;
    float axis_x25_g26761 = break70_g26761.x;
    float c66_g26761 = temp_output_72_0_g26761;
    float axis_y37_g26761 = break70_g26761.y;
    float axis_z29_g26761 = break70_g26761.z;
    float s67_g26761 = sin( temp_output_54_0_g26761 );
    float3 appendResult83_g26761 = (float3(( ( one_minus_c52_g26761 * axis_x25_g26761 * axis_x25_g26761 ) + c66_g26761 ) , ( ( one_minus_c52_g26761 * axis_x25_g26761 * axis_y37_g26761 ) - ( axis_z29_g26761 * s67_g26761 ) ) , ( ( one_minus_c52_g26761 * axis_z29_g26761 * axis_x25_g26761 ) + ( axis_y37_g26761 * s67_g26761 ) )));
    float3 appendResult81_g26761 = (float3(( ( one_minus_c52_g26761 * axis_x25_g26761 * axis_y37_g26761 ) + ( axis_z29_g26761 * s67_g26761 ) ) , ( ( one_minus_c52_g26761 * axis_y37_g26761 * axis_y37_g26761 ) + c66_g26761 ) , ( ( one_minus_c52_g26761 * axis_y37_g26761 * axis_z29_g26761 ) - ( axis_x25_g26761 * s67_g26761 ) )));
    float3 appendResult82_g26761 = (float3(( ( one_minus_c52_g26761 * axis_z29_g26761 * axis_x25_g26761 ) - ( axis_y37_g26761 * s67_g26761 ) ) , ( ( one_minus_c52_g26761 * axis_y37_g26761 * axis_z29_g26761 ) + ( axis_x25_g26761 * s67_g26761 ) ) , ( ( one_minus_c52_g26761 * axis_z29_g26761 * axis_z29_g26761 ) + c66_g26761 )));
    float3 temp_output_38_0_g26761 = ( ase_vertex3Pos - (float3(0,0,0)).xyz );
    float4 lerpResult1_g26755 = lerp( temp_output_3_0_g26754 , float4( ( mul( float3x3(appendResult83_g26761, appendResult81_g26761, appendResult82_g26761), temp_output_38_0_g26761 ) - temp_output_38_0_g26761 ) , 0.0 ) , saturate( clampResult13_g26754 ));
    float4 GUST_MID926_g26752 = ( _PRIMARY_BEND966_g26752 * (( clampResult13_g26754 < 0.0 ) ? lerpResult1_g26760 :  lerpResult1_g26755 ) );
    float3 ase_objectScale = float3( length( unity_ObjectToWorld[ 0 ].xyz ), length( unity_ObjectToWorld[ 1 ].xyz ), length( unity_ObjectToWorld[ 2 ].xyz ) );
    float3 _vec_min_old = float3(1,1,1);
    float3 _vec_max_old = float3(7,7,7);
    float3 clampResult934_g26752 = clamp( ase_objectScale , _vec_min_old , _vec_max_old );
    float4 lerpResult538_g26752 = lerp( float4( temp_output_684_0_g26752 , 0.0 ) , ( float4( temp_output_684_0_g26752 , 0.0 ) + ( float4( GUST_MICRO816_g26752 , 0.0 ) + ( ( float4( GUST798_g26752 , 0.0 ) + GUST_MID926_g26752 ) * float4( (float3(1,1,1) + (clampResult934_g26752 - _vec_min_old) * (float3(3,3,3) - float3(1,1,1)) / (_vec_max_old - _vec_min_old)) , 0.0 ) ) ) ) , AUDIO_BLEND1671_g26743);
    float3 UPDATED_OFFSET611_g27566 = ( ( 1.0 - touchbend_amount614_g27566 ) * ( PLANT_STRENGTH1499_g26743 * lerpResult538_g26752 ).xyz );
    half localunity_ObjectToWorld0w1_g27568 = ( unity_ObjectToWorld[0].w );
    half localunity_ObjectToWorld1w2_g27568 = ( unity_ObjectToWorld[1].w );
    half localunity_ObjectToWorld2w3_g27568 = ( unity_ObjectToWorld[2].w );
    float3 appendResult6_g27568 = (float3(localunity_ObjectToWorld0w1_g27568 , localunity_ObjectToWorld1w2_g27568 , localunity_ObjectToWorld2w3_g27568));
    float3 obj_pos_world743_g27566 = appendResult6_g27568;
    float3 break298_g27593 = ( ( ( (obj_pos_world743_g27566).xyz * float3(97.125,91.88,82.1018) ) + (pivot_object_space717_g27566).xyz ) + ( float3(1.8,3.17,2.775) * ( _Time.y + 0.0 ) ) );
    float2 appendResult299_g27593 = (float2(sin( break298_g27593.x ) , cos( break298_g27593.y )));
    float4 temp_output_273_0_g27593 = (-1.0).xxxx;
    float4 temp_output_271_0_g27593 = (1.0).xxxx;
    float2 clampResult26_g27593 = clamp( appendResult299_g27593 , temp_output_273_0_g27593.xy , temp_output_271_0_g27593.xy );
    float4 tex2DNode625_g27569 = tex2Dlod( _TOUCHBEND_CURRENT_STATE_MAP_MOTION, float4( tbPos_vertex98_g27569, 0, 0.0) );
    float motion_g655_g27569 = tex2DNode625_g27569.g;
    float temp_output_684_29_g27569 = ((_UP_LOW).x + (motion_g655_g27569 - _Vector0.x) * (8.0 - (_UP_LOW).x) / (_Vector1.x - _Vector0.x));
    float motion_r654_g27569 = tex2DNode625_g27569.r;
    float2 break11_g27571 = tbPos_vertex98_g27569;
    float clampResult3_g27572 = clamp( break11_g27571.x , 0.0 , 1.0 );
    float clampResult3_g27574 = clamp( break11_g27571.y , 0.0 , 1.0 );
    float lerpResult8_g27571 = lerp( 1.0 , 4.0 , max( abs( ( ( clampResult3_g27572 * 2.0 ) - 1.0 ) ) , abs( ( ( clampResult3_g27574 * 2.0 ) - 1.0 ) ) ));
    float updated_motion_r702_g27569 = ( motion_r654_g27569 * lerpResult8_g27571 );
    float temp_output_7_0_g27583 = 0.0;
    float movement_amount628_g27569 = ( ( ( temp_output_684_29_g27569 * saturate( ( updated_motion_r702_g27569 - ( mask_r650_g27569 * 2.5 ) ) ) * IN_BEND_RADIUS96_g27569 ) - temp_output_7_0_g27583 ) / ( 8.0 - temp_output_7_0_g27583 ) );
    float movement721_g27566 = ( _GRASS_BEND_AVAILABILITY385_g27566 * movement_amount628_g27569 );
    float3 break702_g27566 = ( float3( clampResult26_g27593 ,  0.0 ) * ( pow( movement721_g27566 , 2.0 ) * float3(1,0.4,0.93) ) );
    float3 appendResult704_g27566 = (float3(break702_g27566.x , break702_g27566.y , break702_g27566.z));
    float3 temp_cast_29 = (0.0).xxx;
    float3 temp_cast_30 = (1.0).xxx;
    float3 temp_output_1_0_g27591 = ( appendResult704_g27566 * ( 1.0 / (( ase_objectScale == temp_cast_29 ) ? temp_cast_30 :  ase_objectScale ) ) );
    float3 temp_output_728_0_g27566 = temp_output_1_0_g27591;
    float3 temp_output_41_0_g27640 = ( lerpResult692_g27566 + UPDATED_OFFSET611_g27566 + temp_output_728_0_g27566 );
    float temp_output_63_0_g27641 = (( unity_LODFade.x >= 1E-06 && unity_LODFade.x <= 0.999999 ) ? unity_LODFade.x :  1.0 );
    float3 lerpResult57_g27641 = lerp( temp_output_41_0_g27640 , -ase_vertex3Pos , ( 1.0 - temp_output_63_0_g27641 ));
    #ifdef INTERNAL_LODFADE_SCALE
        float3 staticSwitch58_g27640 = lerpResult57_g27641;
    #else
        float3 staticSwitch58_g27640 = temp_output_41_0_g27640;
    #endif
    #ifdef LOD_FADE_CROSSFADE
        float3 staticSwitch62_g27640 = staticSwitch58_g27640;
    #else
        float3 staticSwitch62_g27640 = temp_output_41_0_g27640;
    #endif
    v.vertex.xyz += staticSwitch62_g27640;
}